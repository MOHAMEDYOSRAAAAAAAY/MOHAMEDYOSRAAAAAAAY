
Main.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00002bec  00002c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c4  008000c4  00002ce4  2**0
                  ALLOC
  3 .stab         0000210c  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c8f  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008863  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009610  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000099fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <main>
      8a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPin>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_Privet.h"
#include "DIO_Config.h"
#include "DIO_Interface.h"
void DIO_SetPin(u8 Port,u8 Pin,u8 Value){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (Value ==1){
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_SetPin+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_SetPin+0x100>
	switch (Port){
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_SetPin+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_SetPin+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_SetPin+0x60>
     b8e:	ce c0       	rjmp	.+412    	; 0xd2c <DIO_SetPin+0x1e6>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_SetPin+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_SetPin+0xd8>
     ba4:	c3 c0       	rjmp	.+390    	; 0xd2c <DIO_SetPin+0x1e6>
	case 0:Set_Bit(PORTA , Pin);break;
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_SetPin+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_SetPin+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	af c0       	rjmp	.+350    	; 0xd2c <DIO_SetPin+0x1e6>
	case 1:Set_Bit(PORTB , Pin);break;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_SetPin+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_SetPin+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9b c0       	rjmp	.+310    	; 0xd2c <DIO_SetPin+0x1e6>
	case 2:Set_Bit(PORTC , Pin);break;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_SetPin+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_SetPin+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	87 c0       	rjmp	.+270    	; 0xd2c <DIO_SetPin+0x1e6>
	case 3:Set_Bit(PORTD , Pin);break;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPin+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPin+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	73 c0       	rjmp	.+230    	; 0xd2c <DIO_SetPin+0x1e6>
	}
	}
	else{
		switch (Port){
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	3d 83       	std	Y+5, r19	; 0x05
     c4e:	2c 83       	std	Y+4, r18	; 0x04
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	9d 81       	ldd	r25, Y+5	; 0x05
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	91 05       	cpc	r25, r1
     c58:	59 f1       	breq	.+86     	; 0xcb0 <DIO_SetPin+0x16a>
     c5a:	2c 81       	ldd	r18, Y+4	; 0x04
     c5c:	3d 81       	ldd	r19, Y+5	; 0x05
     c5e:	22 30       	cpi	r18, 0x02	; 2
     c60:	31 05       	cpc	r19, r1
     c62:	2c f4       	brge	.+10     	; 0xc6e <DIO_SetPin+0x128>
     c64:	8c 81       	ldd	r24, Y+4	; 0x04
     c66:	9d 81       	ldd	r25, Y+5	; 0x05
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	69 f0       	breq	.+26     	; 0xc86 <DIO_SetPin+0x140>
     c6c:	5f c0       	rjmp	.+190    	; 0xd2c <DIO_SetPin+0x1e6>
     c6e:	2c 81       	ldd	r18, Y+4	; 0x04
     c70:	3d 81       	ldd	r19, Y+5	; 0x05
     c72:	22 30       	cpi	r18, 0x02	; 2
     c74:	31 05       	cpc	r19, r1
     c76:	89 f1       	breq	.+98     	; 0xcda <DIO_SetPin+0x194>
     c78:	8c 81       	ldd	r24, Y+4	; 0x04
     c7a:	9d 81       	ldd	r25, Y+5	; 0x05
     c7c:	83 30       	cpi	r24, 0x03	; 3
     c7e:	91 05       	cpc	r25, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <DIO_SetPin+0x13e>
     c82:	40 c0       	rjmp	.+128    	; 0xd04 <DIO_SetPin+0x1be>
     c84:	53 c0       	rjmp	.+166    	; 0xd2c <DIO_SetPin+0x1e6>
case 0:Clr_Bit(PORTA , Pin);break;
     c86:	ab e3       	ldi	r26, 0x3B	; 59
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	eb e3       	ldi	r30, 0x3B	; 59
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_SetPin+0x15e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_SetPin+0x15a>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	3e c0       	rjmp	.+124    	; 0xd2c <DIO_SetPin+0x1e6>
	case 1:Clr_Bit(PORTB , Pin);break;
     cb0:	a8 e3       	ldi	r26, 0x38	; 56
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e8 e3       	ldi	r30, 0x38	; 56
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_SetPin+0x188>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_SetPin+0x184>
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	29 c0       	rjmp	.+82     	; 0xd2c <DIO_SetPin+0x1e6>
	case 2:Clr_Bit(PORTC , Pin);break;
     cda:	a5 e3       	ldi	r26, 0x35	; 53
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e5 e3       	ldi	r30, 0x35	; 53
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_SetPin+0x1b2>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_SetPin+0x1ae>
     cfc:	80 95       	com	r24
     cfe:	84 23       	and	r24, r20
     d00:	8c 93       	st	X, r24
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <DIO_SetPin+0x1e6>
	case 3:Clr_Bit(PORTD , Pin);break;	}
     d04:	a2 e3       	ldi	r26, 0x32	; 50
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e2 e3       	ldi	r30, 0x32	; 50
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_SetPin+0x1dc>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_SetPin+0x1d8>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
	}}
     d2c:	27 96       	adiw	r28, 0x07	; 7
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <DIO_SetPort>:
void DIO_SetPort(u8 Port, u8 Value){
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <DIO_SetPort+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <DIO_SetPort+0x8>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02

	switch (Port){
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3c 83       	std	Y+4, r19	; 0x04
     d56:	2b 83       	std	Y+3, r18	; 0x03
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	d1 f0       	breq	.+52     	; 0xd96 <DIO_SetPort+0x58>
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	31 05       	cpc	r19, r1
     d6a:	2c f4       	brge	.+10     	; 0xd76 <DIO_SetPort+0x38>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	61 f0       	breq	.+24     	; 0xd8c <DIO_SetPort+0x4e>
     d74:	1e c0       	rjmp	.+60     	; 0xdb2 <DIO_SetPort+0x74>
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	81 f0       	breq	.+32     	; 0xda0 <DIO_SetPort+0x62>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	91 05       	cpc	r25, r1
     d88:	81 f0       	breq	.+32     	; 0xdaa <DIO_SetPort+0x6c>
     d8a:	13 c0       	rjmp	.+38     	; 0xdb2 <DIO_SetPort+0x74>
		case 0:PORTA = Value;break;
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	80 83       	st	Z, r24
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <DIO_SetPort+0x74>
		case 1:PORTB = Value;break;
     d96:	e8 e3       	ldi	r30, 0x38	; 56
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	80 83       	st	Z, r24
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <DIO_SetPort+0x74>
		case 2:PORTC = Value;break;
     da0:	e5 e3       	ldi	r30, 0x35	; 53
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	80 83       	st	Z, r24
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <DIO_SetPort+0x74>
		case 3:PORTD = Value;break;
     daa:	e2 e3       	ldi	r30, 0x32	; 50
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	80 83       	st	Z, r24
}}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <DIO_TogPin>:
void DIO_TogPin(u8 Port, u8 Pin){
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <DIO_TogPin+0x6>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <DIO_TogPin+0x8>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	6a 83       	std	Y+2, r22	; 0x02
		switch (Port){
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3c 83       	std	Y+4, r19	; 0x04
     dd8:	2b 83       	std	Y+3, r18	; 0x03
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	49 f1       	breq	.+82     	; 0xe36 <DIO_TogPin+0x76>
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	2c f4       	brge	.+10     	; 0xdf8 <DIO_TogPin+0x38>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	61 f0       	breq	.+24     	; 0xe0e <DIO_TogPin+0x4e>
     df6:	5a c0       	rjmp	.+180    	; 0xeac <DIO_TogPin+0xec>
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	3c 81       	ldd	r19, Y+4	; 0x04
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	71 f1       	breq	.+92     	; 0xe5e <DIO_TogPin+0x9e>
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	e9 f1       	breq	.+122    	; 0xe86 <DIO_TogPin+0xc6>
     e0c:	4f c0       	rjmp	.+158    	; 0xeac <DIO_TogPin+0xec>
				case 0:Tog_Bit(PORTA,Pin);break;
     e0e:	ab e3       	ldi	r26, 0x3B	; 59
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	eb e3       	ldi	r30, 0x3B	; 59
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_TogPin+0x6c>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_TogPin+0x68>
     e30:	84 27       	eor	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	3b c0       	rjmp	.+118    	; 0xeac <DIO_TogPin+0xec>
				case 1:Tog_Bit(PORTB,Pin);break;
     e36:	a8 e3       	ldi	r26, 0x38	; 56
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e8 e3       	ldi	r30, 0x38	; 56
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_TogPin+0x94>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_TogPin+0x90>
     e58:	84 27       	eor	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	27 c0       	rjmp	.+78     	; 0xeac <DIO_TogPin+0xec>
				case 2:Tog_Bit(PORTC,Pin);break;
     e5e:	a5 e3       	ldi	r26, 0x35	; 53
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e3       	ldi	r30, 0x35	; 53
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_TogPin+0xbc>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_TogPin+0xb8>
     e80:	84 27       	eor	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	13 c0       	rjmp	.+38     	; 0xeac <DIO_TogPin+0xec>
				case 3:Tog_Bit(PORTD,Pin);break;
     e86:	a2 e3       	ldi	r26, 0x32	; 50
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e2 e3       	ldi	r30, 0x32	; 50
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_TogPin+0xe4>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_TogPin+0xe0>
     ea8:	84 27       	eor	r24, r20
     eaa:	8c 93       	st	X, r24


		}
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <DIO_GetPin>:
u8 DIO_GetPin(u8 Port, u8 Pin){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <DIO_GetPin+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_GetPin+0x8>
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	6b 83       	std	Y+3, r22	; 0x03
			u8 x=0;
     ecc:	19 82       	std	Y+1, r1	; 0x01
			switch (Port){
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3d 83       	std	Y+5, r19	; 0x05
     ed6:	2c 83       	std	Y+4, r18	; 0x04
     ed8:	4c 81       	ldd	r20, Y+4	; 0x04
     eda:	5d 81       	ldd	r21, Y+5	; 0x05
     edc:	41 30       	cpi	r20, 0x01	; 1
     ede:	51 05       	cpc	r21, r1
     ee0:	41 f1       	breq	.+80     	; 0xf32 <DIO_GetPin+0x78>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	91 05       	cpc	r25, r1
     eea:	34 f4       	brge	.+12     	; 0xef8 <DIO_GetPin+0x3e>
     eec:	2c 81       	ldd	r18, Y+4	; 0x04
     eee:	3d 81       	ldd	r19, Y+5	; 0x05
     ef0:	21 15       	cp	r18, r1
     ef2:	31 05       	cpc	r19, r1
     ef4:	61 f0       	breq	.+24     	; 0xf0e <DIO_GetPin+0x54>
     ef6:	52 c0       	rjmp	.+164    	; 0xf9c <DIO_GetPin+0xe2>
     ef8:	4c 81       	ldd	r20, Y+4	; 0x04
     efa:	5d 81       	ldd	r21, Y+5	; 0x05
     efc:	42 30       	cpi	r20, 0x02	; 2
     efe:	51 05       	cpc	r21, r1
     f00:	51 f1       	breq	.+84     	; 0xf56 <DIO_GetPin+0x9c>
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	b9 f1       	breq	.+110    	; 0xf7a <DIO_GetPin+0xc0>
     f0c:	47 c0       	rjmp	.+142    	; 0xf9c <DIO_GetPin+0xe2>
		case 0:x=Get_Bit(PORTA,Pin);break;
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_GetPin+0x6c>
     f22:	55 95       	asr	r21
     f24:	47 95       	ror	r20
     f26:	8a 95       	dec	r24
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_GetPin+0x68>
     f2a:	ca 01       	movw	r24, r20
     f2c:	81 70       	andi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	35 c0       	rjmp	.+106    	; 0xf9c <DIO_GetPin+0xe2>
						case 1:x= Get_Bit(PORTB,Pin);break;
     f32:	e8 e3       	ldi	r30, 0x38	; 56
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a9 01       	movw	r20, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_GetPin+0x90>
     f46:	55 95       	asr	r21
     f48:	47 95       	ror	r20
     f4a:	8a 95       	dec	r24
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_GetPin+0x8c>
     f4e:	ca 01       	movw	r24, r20
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	23 c0       	rjmp	.+70     	; 0xf9c <DIO_GetPin+0xe2>
						case 2:x=Get_Bit(PORTC,Pin);break;
     f56:	e5 e3       	ldi	r30, 0x35	; 53
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_GetPin+0xb4>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_GetPin+0xb0>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	11 c0       	rjmp	.+34     	; 0xf9c <DIO_GetPin+0xe2>
						case 3:x=Get_Bit(PORTD,Pin);break;
     f7a:	e2 e3       	ldi	r30, 0x32	; 50
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_GetPin+0xd8>
     f8e:	55 95       	asr	r21
     f90:	47 95       	ror	r20
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_GetPin+0xd4>
     f96:	ca 01       	movw	r24, r20
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	89 83       	std	Y+1, r24	; 0x01

	}return x;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
		}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_GetPort>:
u8 DIO_GetPort(u8 Port){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <DIO_GetPort+0x6>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DIO_GetPort+0x8>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	8a 83       	std	Y+2, r24	; 0x02
			u8 x=0;
     fbc:	19 82       	std	Y+1, r1	; 0x01
			switch (Port){
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3c 83       	std	Y+4, r19	; 0x04
     fc6:	2b 83       	std	Y+3, r18	; 0x03
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	d1 f0       	breq	.+52     	; 0x1006 <DIO_GetPort+0x58>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	22 30       	cpi	r18, 0x02	; 2
     fd8:	31 05       	cpc	r19, r1
     fda:	2c f4       	brge	.+10     	; 0xfe6 <DIO_GetPort+0x38>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	61 f0       	breq	.+24     	; 0xffc <DIO_GetPort+0x4e>
     fe4:	1e c0       	rjmp	.+60     	; 0x1022 <DIO_GetPort+0x74>
     fe6:	2b 81       	ldd	r18, Y+3	; 0x03
     fe8:	3c 81       	ldd	r19, Y+4	; 0x04
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	81 f0       	breq	.+32     	; 0x1010 <DIO_GetPort+0x62>
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	91 05       	cpc	r25, r1
     ff8:	81 f0       	breq	.+32     	; 0x101a <DIO_GetPort+0x6c>
     ffa:	13 c0       	rjmp	.+38     	; 0x1022 <DIO_GetPort+0x74>
		case 0:x=PORTA;break;
     ffc:	eb e3       	ldi	r30, 0x3B	; 59
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	0e c0       	rjmp	.+28     	; 0x1022 <DIO_GetPort+0x74>
						case 1:x=PORTB;break;
    1006:	e8 e3       	ldi	r30, 0x38	; 56
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <DIO_GetPort+0x74>
						case 2:x=PORTC;break;
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <DIO_GetPort+0x74>
						case 3:x=PORTD;break;
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	89 83       	std	Y+1, r24	; 0x01

	}return x;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_PinDirection>:

void DIO_PinDirection(u8 Port,u8 Pin ,u8 Dir){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03
	if (Dir ==1){
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	09 f0       	breq	.+2      	; 0x1054 <DIO_PinDirection+0x22>
    1052:	6f c0       	rjmp	.+222    	; 0x1132 <DIO_PinDirection+0x100>
		switch (Port){
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3f 83       	std	Y+7, r19	; 0x07
    105c:	2e 83       	std	Y+6, r18	; 0x06
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	9f 81       	ldd	r25, Y+7	; 0x07
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	49 f1       	breq	.+82     	; 0x10ba <DIO_PinDirection+0x88>
    1068:	2e 81       	ldd	r18, Y+6	; 0x06
    106a:	3f 81       	ldd	r19, Y+7	; 0x07
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	2c f4       	brge	.+10     	; 0x107c <DIO_PinDirection+0x4a>
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	61 f0       	breq	.+24     	; 0x1092 <DIO_PinDirection+0x60>
    107a:	c9 c0       	rjmp	.+402    	; 0x120e <DIO_PinDirection+0x1dc>
    107c:	2e 81       	ldd	r18, Y+6	; 0x06
    107e:	3f 81       	ldd	r19, Y+7	; 0x07
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	71 f1       	breq	.+92     	; 0x10e2 <DIO_PinDirection+0xb0>
    1086:	8e 81       	ldd	r24, Y+6	; 0x06
    1088:	9f 81       	ldd	r25, Y+7	; 0x07
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	91 05       	cpc	r25, r1
    108e:	e9 f1       	breq	.+122    	; 0x110a <DIO_PinDirection+0xd8>
    1090:	be c0       	rjmp	.+380    	; 0x120e <DIO_PinDirection+0x1dc>
		case 0:Set_Bit(DDRA , Pin);break;
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_PinDirection+0x7e>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_PinDirection+0x7a>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	aa c0       	rjmp	.+340    	; 0x120e <DIO_PinDirection+0x1dc>
		case 1:Set_Bit(DDRB , Pin);break;
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_PinDirection+0xa6>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_PinDirection+0xa2>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	96 c0       	rjmp	.+300    	; 0x120e <DIO_PinDirection+0x1dc>
		case 2:Set_Bit(DDRC , Pin);break;
    10e2:	a4 e3       	ldi	r26, 0x34	; 52
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e4 e3       	ldi	r30, 0x34	; 52
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_PinDirection+0xce>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_PinDirection+0xca>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	82 c0       	rjmp	.+260    	; 0x120e <DIO_PinDirection+0x1dc>
		case 3:Set_Bit(DDRD , Pin);break;
    110a:	a1 e3       	ldi	r26, 0x31	; 49
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e1 e3       	ldi	r30, 0x31	; 49
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_PinDirection+0xf6>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_PinDirection+0xf2>
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	6e c0       	rjmp	.+220    	; 0x120e <DIO_PinDirection+0x1dc>
		}
	}
	else {
			switch (Port){
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3d 83       	std	Y+5, r19	; 0x05
    113a:	2c 83       	std	Y+4, r18	; 0x04
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	49 f1       	breq	.+82     	; 0x1198 <DIO_PinDirection+0x166>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <DIO_PinDirection+0x128>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <DIO_PinDirection+0x13e>
    1158:	5a c0       	rjmp	.+180    	; 0x120e <DIO_PinDirection+0x1dc>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	71 f1       	breq	.+92     	; 0x11c0 <DIO_PinDirection+0x18e>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	e9 f1       	breq	.+122    	; 0x11e8 <DIO_PinDirection+0x1b6>
    116e:	4f c0       	rjmp	.+158    	; 0x120e <DIO_PinDirection+0x1dc>
			case 0: Set_Bit(DDRA , Pin);break;
    1170:	aa e3       	ldi	r26, 0x3A	; 58
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e3       	ldi	r30, 0x3A	; 58
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_PinDirection+0x15c>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_PinDirection+0x158>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	3b c0       	rjmp	.+118    	; 0x120e <DIO_PinDirection+0x1dc>
			case 1:Set_Bit(DDRB , Pin);break;
    1198:	a7 e3       	ldi	r26, 0x37	; 55
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_PinDirection+0x184>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_PinDirection+0x180>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	27 c0       	rjmp	.+78     	; 0x120e <DIO_PinDirection+0x1dc>
			case 2:Set_Bit(DDRC , Pin);break;
    11c0:	a4 e3       	ldi	r26, 0x34	; 52
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_PinDirection+0x1ac>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_PinDirection+0x1a8>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	13 c0       	rjmp	.+38     	; 0x120e <DIO_PinDirection+0x1dc>
			case 3:Set_Bit(DDRD , Pin);break;
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_PinDirection+0x1d4>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_PinDirection+0x1d0>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
			}

}}
    120e:	27 96       	adiw	r28, 0x07	; 7
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <DIO_PortDirection>:
	void DIO_PortDirection(u8 Port ,u8 Dir){
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_PortDirection+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <DIO_PortDirection+0x8>
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_PortDirection+0xa>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02
		if(Dir==1){
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	99 f5       	brne	.+102    	; 0x129e <DIO_PortDirection+0x7e>
		switch (Port){
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3e 83       	std	Y+6, r19	; 0x06
    1240:	2d 83       	std	Y+5, r18	; 0x05
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	d1 f0       	breq	.+52     	; 0x1280 <DIO_PortDirection+0x60>
    124c:	2d 81       	ldd	r18, Y+5	; 0x05
    124e:	3e 81       	ldd	r19, Y+6	; 0x06
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <DIO_PortDirection+0x40>
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <DIO_PortDirection+0x56>
    125e:	4d c0       	rjmp	.+154    	; 0x12fa <DIO_PortDirection+0xda>
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	81 f0       	breq	.+32     	; 0x128a <DIO_PortDirection+0x6a>
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <DIO_PortDirection+0x74>
    1274:	42 c0       	rjmp	.+132    	; 0x12fa <DIO_PortDirection+0xda>
				case 0:DDRA=0xff;break;
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	80 83       	st	Z, r24
    127e:	3d c0       	rjmp	.+122    	; 0x12fa <DIO_PortDirection+0xda>
				case 1:DDRB=0xff;break;
    1280:	e7 e3       	ldi	r30, 0x37	; 55
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	80 83       	st	Z, r24
    1288:	38 c0       	rjmp	.+112    	; 0x12fa <DIO_PortDirection+0xda>
				case 2:DDRC=0xff;break;
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	80 83       	st	Z, r24
    1292:	33 c0       	rjmp	.+102    	; 0x12fa <DIO_PortDirection+0xda>
				case 3:DDRD=0xff;break;
    1294:	e1 e3       	ldi	r30, 0x31	; 49
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	80 83       	st	Z, r24
    129c:	2e c0       	rjmp	.+92     	; 0x12fa <DIO_PortDirection+0xda>
				}
		}

		else{

			switch (Port){
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3c 83       	std	Y+4, r19	; 0x04
    12a6:	2b 83       	std	Y+3, r18	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	c9 f0       	breq	.+50     	; 0x12e4 <DIO_PortDirection+0xc4>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_PortDirection+0xa6>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_PortDirection+0xbc>
    12c4:	1a c0       	rjmp	.+52     	; 0x12fa <DIO_PortDirection+0xda>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	71 f0       	breq	.+28     	; 0x12ec <DIO_PortDirection+0xcc>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	69 f0       	breq	.+26     	; 0x12f4 <DIO_PortDirection+0xd4>
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <DIO_PortDirection+0xda>
            case 0: DDRA=0x00;break;
    12dc:	ea e3       	ldi	r30, 0x3A	; 58
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	10 82       	st	Z, r1
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <DIO_PortDirection+0xda>
			case 1: DDRB=0x00;break;
    12e4:	e7 e3       	ldi	r30, 0x37	; 55
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	10 82       	st	Z, r1
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <DIO_PortDirection+0xda>
			case 2: DDRC=0x00;break;
    12ec:	e4 e3       	ldi	r30, 0x34	; 52
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <DIO_PortDirection+0xda>
			case 3: DDRD=0x00;break;
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	10 82       	st	Z, r1
			}
		}
	}
    12fa:	26 96       	adiw	r28, 0x06	; 6
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <LCD_SendCom>:
#include<avr/io.h>
#include<util/delay.h>
#include "LCD_Interface.h"
#include "LCD_Configration.h"

void LCD_SendCom(u8 u8_Adata) {
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	6d 97       	sbiw	r28, 0x1d	; 29
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8d 8f       	std	Y+29, r24	; 0x1d
	ControllPort = 0b00000000;
    1322:	e8 e3       	ldi	r30, 0x38	; 56
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	10 82       	st	Z, r1
	DataPort = u8_Adata;
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132e:	80 83       	st	Z, r24
	ControllPort = 0b00000100;
    1330:	e8 e3       	ldi	r30, 0x38	; 56
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	80 83       	st	Z, r24
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a0 e8       	ldi	r26, 0x80	; 128
    133e:	bf e3       	ldi	r27, 0x3F	; 63
    1340:	89 8f       	std	Y+25, r24	; 0x19
    1342:	9a 8f       	std	Y+26, r25	; 0x1a
    1344:	ab 8f       	std	Y+27, r26	; 0x1b
    1346:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1348:	69 8d       	ldd	r22, Y+25	; 0x19
    134a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	4a ef       	ldi	r20, 0xFA	; 250
    1356:	54 e4       	ldi	r21, 0x44	; 68
    1358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	8d 8b       	std	Y+21, r24	; 0x15
    1362:	9e 8b       	std	Y+22, r25	; 0x16
    1364:	af 8b       	std	Y+23, r26	; 0x17
    1366:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1368:	6d 89       	ldd	r22, Y+21	; 0x15
    136a:	7e 89       	ldd	r23, Y+22	; 0x16
    136c:	8f 89       	ldd	r24, Y+23	; 0x17
    136e:	98 8d       	ldd	r25, Y+24	; 0x18
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e8       	ldi	r20, 0x80	; 128
    1376:	5f e3       	ldi	r21, 0x3F	; 63
    1378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137c:	88 23       	and	r24, r24
    137e:	2c f4       	brge	.+10     	; 0x138a <LCD_SendCom+0x7e>
		__ticks = 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
    1388:	3f c0       	rjmp	.+126    	; 0x1408 <LCD_SendCom+0xfc>
	else if (__tmp > 65535)
    138a:	6d 89       	ldd	r22, Y+21	; 0x15
    138c:	7e 89       	ldd	r23, Y+22	; 0x16
    138e:	8f 89       	ldd	r24, Y+23	; 0x17
    1390:	98 8d       	ldd	r25, Y+24	; 0x18
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	3f ef       	ldi	r19, 0xFF	; 255
    1396:	4f e7       	ldi	r20, 0x7F	; 127
    1398:	57 e4       	ldi	r21, 0x47	; 71
    139a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139e:	18 16       	cp	r1, r24
    13a0:	4c f5       	brge	.+82     	; 0x13f4 <LCD_SendCom+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a2:	69 8d       	ldd	r22, Y+25	; 0x19
    13a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e2       	ldi	r20, 0x20	; 32
    13b0:	51 e4       	ldi	r21, 0x41	; 65
    13b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <LCD_SendCom+0xde>
    13cc:	88 ec       	ldi	r24, 0xC8	; 200
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9a 8b       	std	Y+18, r25	; 0x12
    13d2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d4:	89 89       	ldd	r24, Y+17	; 0x11
    13d6:	9a 89       	ldd	r25, Y+18	; 0x12
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <LCD_SendCom+0xcc>
    13dc:	9a 8b       	std	Y+18, r25	; 0x12
    13de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e0:	8b 89       	ldd	r24, Y+19	; 0x13
    13e2:	9c 89       	ldd	r25, Y+20	; 0x14
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	9c 8b       	std	Y+20, r25	; 0x14
    13e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	8b 89       	ldd	r24, Y+19	; 0x13
    13ec:	9c 89       	ldd	r25, Y+20	; 0x14
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	69 f7       	brne	.-38     	; 0x13cc <LCD_SendCom+0xc0>
    13f2:	14 c0       	rjmp	.+40     	; 0x141c <LCD_SendCom+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f4:	6d 89       	ldd	r22, Y+21	; 0x15
    13f6:	7e 89       	ldd	r23, Y+22	; 0x16
    13f8:	8f 89       	ldd	r24, Y+23	; 0x17
    13fa:	98 8d       	ldd	r25, Y+24	; 0x18
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	98 8b       	std	Y+16, r25	; 0x10
    140e:	8f 87       	std	Y+15, r24	; 0x0f
    1410:	8f 85       	ldd	r24, Y+15	; 0x0f
    1412:	98 89       	ldd	r25, Y+16	; 0x10
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <LCD_SendCom+0x108>
    1418:	98 8b       	std	Y+16, r25	; 0x10
    141a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	ControllPort = 0b00000000;
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	10 82       	st	Z, r1
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e8       	ldi	r26, 0x80	; 128
    1428:	bf e3       	ldi	r27, 0x3F	; 63
    142a:	8b 87       	std	Y+11, r24	; 0x0b
    142c:	9c 87       	std	Y+12, r25	; 0x0c
    142e:	ad 87       	std	Y+13, r26	; 0x0d
    1430:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	98 87       	std	Y+8, r25	; 0x08
    144e:	a9 87       	std	Y+9, r26	; 0x09
    1450:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <LCD_SendCom+0x168>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <LCD_SendCom+0x1e6>
	else if (__tmp > 65535)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <LCD_SendCom+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <LCD_SendCom+0x1c8>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <LCD_SendCom+0x1b6>
    14c6:	9c 83       	std	Y+4, r25	; 0x04
    14c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <LCD_SendCom+0x1aa>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <LCD_SendCom+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6f 81       	ldd	r22, Y+7	; 0x07
    14e0:	78 85       	ldd	r23, Y+8	; 0x08
    14e2:	89 85       	ldd	r24, Y+9	; 0x09
    14e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_SendCom+0x1f2>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1506:	6d 96       	adiw	r28, 0x1d	; 29
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <LCD_Init>:

void LCD_Init(void) {
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	c6 54       	subi	r28, 0x46	; 70
    1526:	d0 40       	sbci	r29, 0x00	; 0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
	DDR_DataPort = 0xff;
    1532:	ea e3       	ldi	r30, 0x3A	; 58
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 83       	st	Z, r24
	DDR_ControllPort = 0xff;
    153a:	e7 e3       	ldi	r30, 0x37	; 55
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	80 83       	st	Z, r24
    1542:	fe 01       	movw	r30, r28
    1544:	ed 5b       	subi	r30, 0xBD	; 189
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a8 e4       	ldi	r26, 0x48	; 72
    154e:	b2 e4       	ldi	r27, 0x42	; 66
    1550:	80 83       	st	Z, r24
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	a2 83       	std	Z+2, r26	; 0x02
    1556:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	8e 01       	movw	r16, r28
    155a:	01 5c       	subi	r16, 0xC1	; 193
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	fe 01       	movw	r30, r28
    1560:	ed 5b       	subi	r30, 0xBD	; 189
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4a ef       	ldi	r20, 0xFA	; 250
    1572:	54 e4       	ldi	r21, 0x44	; 68
    1574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	f8 01       	movw	r30, r16
    157e:	80 83       	st	Z, r24
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	a2 83       	std	Z+2, r26	; 0x02
    1584:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1586:	fe 01       	movw	r30, r28
    1588:	ff 96       	adiw	r30, 0x3f	; 63
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <LCD_Init+0x94>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e af       	std	Y+62, r25	; 0x3e
    15a8:	8d af       	std	Y+61, r24	; 0x3d
    15aa:	46 c0       	rjmp	.+140    	; 0x1638 <LCD_Init+0x120>
	else if (__tmp > 65535)
    15ac:	fe 01       	movw	r30, r28
    15ae:	ff 96       	adiw	r30, 0x3f	; 63
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	64 f5       	brge	.+88     	; 0x1620 <LCD_Init+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	fe 01       	movw	r30, r28
    15ca:	ed 5b       	subi	r30, 0xBD	; 189
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	60 81       	ld	r22, Z
    15d0:	71 81       	ldd	r23, Z+1	; 0x01
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9e af       	std	Y+62, r25	; 0x3e
    15f4:	8d af       	std	Y+61, r24	; 0x3d
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <LCD_Init+0xfe>
    15f8:	88 ec       	ldi	r24, 0xC8	; 200
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c af       	std	Y+60, r25	; 0x3c
    15fe:	8b af       	std	Y+59, r24	; 0x3b
    1600:	8b ad       	ldd	r24, Y+59	; 0x3b
    1602:	9c ad       	ldd	r25, Y+60	; 0x3c
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_Init+0xec>
    1608:	9c af       	std	Y+60, r25	; 0x3c
    160a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	8d ad       	ldd	r24, Y+61	; 0x3d
    160e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9e af       	std	Y+62, r25	; 0x3e
    1614:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	8d ad       	ldd	r24, Y+61	; 0x3d
    1618:	9e ad       	ldd	r25, Y+62	; 0x3e
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <LCD_Init+0xe0>
    161e:	16 c0       	rjmp	.+44     	; 0x164c <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	fe 01       	movw	r30, r28
    1622:	ff 96       	adiw	r30, 0x3f	; 63
    1624:	60 81       	ld	r22, Z
    1626:	71 81       	ldd	r23, Z+1	; 0x01
    1628:	82 81       	ldd	r24, Z+2	; 0x02
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9e af       	std	Y+62, r25	; 0x3e
    1636:	8d af       	std	Y+61, r24	; 0x3d
    1638:	8d ad       	ldd	r24, Y+61	; 0x3d
    163a:	9e ad       	ldd	r25, Y+62	; 0x3e
    163c:	9a af       	std	Y+58, r25	; 0x3a
    163e:	89 af       	std	Y+57, r24	; 0x39
    1640:	89 ad       	ldd	r24, Y+57	; 0x39
    1642:	9a ad       	ldd	r25, Y+58	; 0x3a
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <LCD_Init+0x12c>
    1648:	9a af       	std	Y+58, r25	; 0x3a
    164a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_SendCom(0b00111000);
    164c:	88 e3       	ldi	r24, 0x38	; 56
    164e:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 e8       	ldi	r26, 0x80	; 128
    1658:	bf e3       	ldi	r27, 0x3F	; 63
    165a:	8d ab       	std	Y+53, r24	; 0x35
    165c:	9e ab       	std	Y+54, r25	; 0x36
    165e:	af ab       	std	Y+55, r26	; 0x37
    1660:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1662:	6d a9       	ldd	r22, Y+53	; 0x35
    1664:	7e a9       	ldd	r23, Y+54	; 0x36
    1666:	8f a9       	ldd	r24, Y+55	; 0x37
    1668:	98 ad       	ldd	r25, Y+56	; 0x38
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a ef       	ldi	r20, 0xFA	; 250
    1670:	54 e4       	ldi	r21, 0x44	; 68
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	89 ab       	std	Y+49, r24	; 0x31
    167c:	9a ab       	std	Y+50, r25	; 0x32
    167e:	ab ab       	std	Y+51, r26	; 0x33
    1680:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1682:	69 a9       	ldd	r22, Y+49	; 0x31
    1684:	7a a9       	ldd	r23, Y+50	; 0x32
    1686:	8b a9       	ldd	r24, Y+51	; 0x33
    1688:	9c a9       	ldd	r25, Y+52	; 0x34
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	2c f4       	brge	.+10     	; 0x16a4 <LCD_Init+0x18c>
		__ticks = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	98 ab       	std	Y+48, r25	; 0x30
    16a0:	8f a7       	std	Y+47, r24	; 0x2f
    16a2:	3f c0       	rjmp	.+126    	; 0x1722 <LCD_Init+0x20a>
	else if (__tmp > 65535)
    16a4:	69 a9       	ldd	r22, Y+49	; 0x31
    16a6:	7a a9       	ldd	r23, Y+50	; 0x32
    16a8:	8b a9       	ldd	r24, Y+51	; 0x33
    16aa:	9c a9       	ldd	r25, Y+52	; 0x34
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	3f ef       	ldi	r19, 0xFF	; 255
    16b0:	4f e7       	ldi	r20, 0x7F	; 127
    16b2:	57 e4       	ldi	r21, 0x47	; 71
    16b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b8:	18 16       	cp	r1, r24
    16ba:	4c f5       	brge	.+82     	; 0x170e <LCD_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16bc:	6d a9       	ldd	r22, Y+53	; 0x35
    16be:	7e a9       	ldd	r23, Y+54	; 0x36
    16c0:	8f a9       	ldd	r24, Y+55	; 0x37
    16c2:	98 ad       	ldd	r25, Y+56	; 0x38
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	98 ab       	std	Y+48, r25	; 0x30
    16e2:	8f a7       	std	Y+47, r24	; 0x2f
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <LCD_Init+0x1ec>
    16e6:	88 ec       	ldi	r24, 0xC8	; 200
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e a7       	std	Y+46, r25	; 0x2e
    16ec:	8d a7       	std	Y+45, r24	; 0x2d
    16ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    16f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <LCD_Init+0x1da>
    16f6:	9e a7       	std	Y+46, r25	; 0x2e
    16f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fc:	98 a9       	ldd	r25, Y+48	; 0x30
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	98 ab       	std	Y+48, r25	; 0x30
    1702:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1704:	8f a5       	ldd	r24, Y+47	; 0x2f
    1706:	98 a9       	ldd	r25, Y+48	; 0x30
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	69 f7       	brne	.-38     	; 0x16e6 <LCD_Init+0x1ce>
    170c:	14 c0       	rjmp	.+40     	; 0x1736 <LCD_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	69 a9       	ldd	r22, Y+49	; 0x31
    1710:	7a a9       	ldd	r23, Y+50	; 0x32
    1712:	8b a9       	ldd	r24, Y+51	; 0x33
    1714:	9c a9       	ldd	r25, Y+52	; 0x34
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	98 ab       	std	Y+48, r25	; 0x30
    1720:	8f a7       	std	Y+47, r24	; 0x2f
    1722:	8f a5       	ldd	r24, Y+47	; 0x2f
    1724:	98 a9       	ldd	r25, Y+48	; 0x30
    1726:	9c a7       	std	Y+44, r25	; 0x2c
    1728:	8b a7       	std	Y+43, r24	; 0x2b
    172a:	8b a5       	ldd	r24, Y+43	; 0x2b
    172c:	9c a5       	ldd	r25, Y+44	; 0x2c
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <LCD_Init+0x216>
    1732:	9c a7       	std	Y+44, r25	; 0x2c
    1734:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_SendCom(0b00001100);
    1736:	8c e0       	ldi	r24, 0x0C	; 12
    1738:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e8       	ldi	r26, 0x80	; 128
    1742:	bf e3       	ldi	r27, 0x3F	; 63
    1744:	8f a3       	std	Y+39, r24	; 0x27
    1746:	98 a7       	std	Y+40, r25	; 0x28
    1748:	a9 a7       	std	Y+41, r26	; 0x29
    174a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6f a1       	ldd	r22, Y+39	; 0x27
    174e:	78 a5       	ldd	r23, Y+40	; 0x28
    1750:	89 a5       	ldd	r24, Y+41	; 0x29
    1752:	9a a5       	ldd	r25, Y+42	; 0x2a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a ef       	ldi	r20, 0xFA	; 250
    175a:	54 e4       	ldi	r21, 0x44	; 68
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8b a3       	std	Y+35, r24	; 0x23
    1766:	9c a3       	std	Y+36, r25	; 0x24
    1768:	ad a3       	std	Y+37, r26	; 0x25
    176a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    176c:	6b a1       	ldd	r22, Y+35	; 0x23
    176e:	7c a1       	ldd	r23, Y+36	; 0x24
    1770:	8d a1       	ldd	r24, Y+37	; 0x25
    1772:	9e a1       	ldd	r25, Y+38	; 0x26
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <LCD_Init+0x276>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
    178c:	3f c0       	rjmp	.+126    	; 0x180c <LCD_Init+0x2f4>
	else if (__tmp > 65535)
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <LCD_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6f a1       	ldd	r22, Y+39	; 0x27
    17a8:	78 a5       	ldd	r23, Y+40	; 0x28
    17aa:	89 a5       	ldd	r24, Y+41	; 0x29
    17ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <LCD_Init+0x2d6>
    17d0:	88 ec       	ldi	r24, 0xC8	; 200
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	98 a3       	std	Y+32, r25	; 0x20
    17d6:	8f 8f       	std	Y+31, r24	; 0x1f
    17d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17da:	98 a1       	ldd	r25, Y+32	; 0x20
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LCD_Init+0x2c4>
    17e0:	98 a3       	std	Y+32, r25	; 0x20
    17e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	89 a1       	ldd	r24, Y+33	; 0x21
    17e6:	9a a1       	ldd	r25, Y+34	; 0x22
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9a a3       	std	Y+34, r25	; 0x22
    17ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <LCD_Init+0x2b8>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <LCD_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6b a1       	ldd	r22, Y+35	; 0x23
    17fa:	7c a1       	ldd	r23, Y+36	; 0x24
    17fc:	8d a1       	ldd	r24, Y+37	; 0x25
    17fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9a a3       	std	Y+34, r25	; 0x22
    180a:	89 a3       	std	Y+33, r24	; 0x21
    180c:	89 a1       	ldd	r24, Y+33	; 0x21
    180e:	9a a1       	ldd	r25, Y+34	; 0x22
    1810:	9e 8f       	std	Y+30, r25	; 0x1e
    1812:	8d 8f       	std	Y+29, r24	; 0x1d
    1814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1816:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_Init+0x300>
    181c:	9e 8f       	std	Y+30, r25	; 0x1e
    181e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_SendCom(0b00000001);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e4       	ldi	r26, 0x40	; 64
    182c:	b0 e4       	ldi	r27, 0x40	; 64
    182e:	89 8f       	std	Y+25, r24	; 0x19
    1830:	9a 8f       	std	Y+26, r25	; 0x1a
    1832:	ab 8f       	std	Y+27, r26	; 0x1b
    1834:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1836:	69 8d       	ldd	r22, Y+25	; 0x19
    1838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    183a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a ef       	ldi	r20, 0xFA	; 250
    1844:	54 e4       	ldi	r21, 0x44	; 68
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8d 8b       	std	Y+21, r24	; 0x15
    1850:	9e 8b       	std	Y+22, r25	; 0x16
    1852:	af 8b       	std	Y+23, r26	; 0x17
    1854:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1856:	6d 89       	ldd	r22, Y+21	; 0x15
    1858:	7e 89       	ldd	r23, Y+22	; 0x16
    185a:	8f 89       	ldd	r24, Y+23	; 0x17
    185c:	98 8d       	ldd	r25, Y+24	; 0x18
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <LCD_Init+0x360>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 8b       	std	Y+20, r25	; 0x14
    1874:	8b 8b       	std	Y+19, r24	; 0x13
    1876:	3f c0       	rjmp	.+126    	; 0x18f6 <LCD_Init+0x3de>
	else if (__tmp > 65535)
    1878:	6d 89       	ldd	r22, Y+21	; 0x15
    187a:	7e 89       	ldd	r23, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	4c f5       	brge	.+82     	; 0x18e2 <LCD_Init+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	69 8d       	ldd	r22, Y+25	; 0x19
    1892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e2       	ldi	r20, 0x20	; 32
    189e:	51 e4       	ldi	r21, 0x41	; 65
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <LCD_Init+0x3c0>
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9a 8b       	std	Y+18, r25	; 0x12
    18c0:	89 8b       	std	Y+17, r24	; 0x11
    18c2:	89 89       	ldd	r24, Y+17	; 0x11
    18c4:	9a 89       	ldd	r25, Y+18	; 0x12
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_Init+0x3ae>
    18ca:	9a 8b       	std	Y+18, r25	; 0x12
    18cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ce:	8b 89       	ldd	r24, Y+19	; 0x13
    18d0:	9c 89       	ldd	r25, Y+20	; 0x14
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	9c 8b       	std	Y+20, r25	; 0x14
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d8:	8b 89       	ldd	r24, Y+19	; 0x13
    18da:	9c 89       	ldd	r25, Y+20	; 0x14
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	69 f7       	brne	.-38     	; 0x18ba <LCD_Init+0x3a2>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <LCD_Init+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	6d 89       	ldd	r22, Y+21	; 0x15
    18e4:	7e 89       	ldd	r23, Y+22	; 0x16
    18e6:	8f 89       	ldd	r24, Y+23	; 0x17
    18e8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
    18f6:	8b 89       	ldd	r24, Y+19	; 0x13
    18f8:	9c 89       	ldd	r25, Y+20	; 0x14
    18fa:	98 8b       	std	Y+16, r25	; 0x10
    18fc:	8f 87       	std	Y+15, r24	; 0x0f
    18fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1900:	98 89       	ldd	r25, Y+16	; 0x10
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCD_Init+0x3ea>
    1906:	98 8b       	std	Y+16, r25	; 0x10
    1908:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCom(0b00000100);
    190a:	84 e0       	ldi	r24, 0x04	; 4
    190c:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a0 e4       	ldi	r26, 0x40	; 64
    1916:	b0 e4       	ldi	r27, 0x40	; 64
    1918:	8b 87       	std	Y+11, r24	; 0x0b
    191a:	9c 87       	std	Y+12, r25	; 0x0c
    191c:	ad 87       	std	Y+13, r26	; 0x0d
    191e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	4a ef       	ldi	r20, 0xFA	; 250
    192e:	54 e4       	ldi	r21, 0x44	; 68
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8f 83       	std	Y+7, r24	; 0x07
    193a:	98 87       	std	Y+8, r25	; 0x08
    193c:	a9 87       	std	Y+9, r26	; 0x09
    193e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1940:	6f 81       	ldd	r22, Y+7	; 0x07
    1942:	78 85       	ldd	r23, Y+8	; 0x08
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1954:	88 23       	and	r24, r24
    1956:	2c f4       	brge	.+10     	; 0x1962 <LCD_Init+0x44a>
		__ticks = 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	3f c0       	rjmp	.+126    	; 0x19e0 <LCD_Init+0x4c8>
	else if (__tmp > 65535)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	4c f5       	brge	.+82     	; 0x19cc <LCD_Init+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197a:	6b 85       	ldd	r22, Y+11	; 0x0b
    197c:	7c 85       	ldd	r23, Y+12	; 0x0c
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e2       	ldi	r20, 0x20	; 32
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <LCD_Init+0x4aa>
    19a4:	88 ec       	ldi	r24, 0xC8	; 200
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <LCD_Init+0x498>
    19b4:	9c 83       	std	Y+4, r25	; 0x04
    19b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <LCD_Init+0x48c>
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <LCD_Init+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19cc:	6f 81       	ldd	r22, Y+7	; 0x07
    19ce:	78 85       	ldd	r23, Y+8	; 0x08
    19d0:	89 85       	ldd	r24, Y+9	; 0x09
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_Init+0x4d4>
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	LCD_SendCom(0b00000001);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>

}
    19fa:	ca 5b       	subi	r28, 0xBA	; 186
    19fc:	df 4f       	sbci	r29, 0xFF	; 255
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <LCD_SendChar>:

void LCD_SendChar(u8 Char) {
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	6d 97       	sbiw	r28, 0x1d	; 29
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	8d 8f       	std	Y+29, r24	; 0x1d
	ControllPort = 0b00000001; //RS --->B0 //RW --->B1 //EN --->B2
    1a28:	e8 e3       	ldi	r30, 0x38	; 56
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 83       	st	Z, r24
	DataPort = Char;
    1a30:	eb e3       	ldi	r30, 0x3B	; 59
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a36:	80 83       	st	Z, r24
	ControllPort = 0b00000101;
    1a38:	e8 e3       	ldi	r30, 0x38	; 56
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	85 e0       	ldi	r24, 0x05	; 5
    1a3e:	80 83       	st	Z, r24
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a0 e8       	ldi	r26, 0x80	; 128
    1a46:	bf e3       	ldi	r27, 0x3F	; 63
    1a48:	89 8f       	std	Y+25, r24	; 0x19
    1a4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	69 8d       	ldd	r22, Y+25	; 0x19
    1a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4a ef       	ldi	r20, 0xFA	; 250
    1a5e:	54 e4       	ldi	r21, 0x44	; 68
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	8d 8b       	std	Y+21, r24	; 0x15
    1a6a:	9e 8b       	std	Y+22, r25	; 0x16
    1a6c:	af 8b       	std	Y+23, r26	; 0x17
    1a6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <LCD_SendChar+0x80>
		__ticks = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 8b       	std	Y+20, r25	; 0x14
    1a8e:	8b 8b       	std	Y+19, r24	; 0x13
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <LCD_SendChar+0xfe>
	else if (__tmp > 65535)
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	4c f5       	brge	.+82     	; 0x1afc <LCD_SendChar+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <LCD_SendChar+0xe0>
    1ad4:	88 ec       	ldi	r24, 0xC8	; 200
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9a 8b       	std	Y+18, r25	; 0x12
    1ada:	89 8b       	std	Y+17, r24	; 0x11
    1adc:	89 89       	ldd	r24, Y+17	; 0x11
    1ade:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_SendChar+0xce>
    1ae4:	9a 8b       	std	Y+18, r25	; 0x12
    1ae6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aea:	9c 89       	ldd	r25, Y+20	; 0x14
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9c 8b       	std	Y+20, r25	; 0x14
    1af0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	8b 89       	ldd	r24, Y+19	; 0x13
    1af4:	9c 89       	ldd	r25, Y+20	; 0x14
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <LCD_SendChar+0xc2>
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <LCD_SendChar+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9c 8b       	std	Y+20, r25	; 0x14
    1b0e:	8b 8b       	std	Y+19, r24	; 0x13
    1b10:	8b 89       	ldd	r24, Y+19	; 0x13
    1b12:	9c 89       	ldd	r25, Y+20	; 0x14
    1b14:	98 8b       	std	Y+16, r25	; 0x10
    1b16:	8f 87       	std	Y+15, r24	; 0x0f
    1b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1a:	98 89       	ldd	r25, Y+16	; 0x10
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_SendChar+0x10a>
    1b20:	98 8b       	std	Y+16, r25	; 0x10
    1b22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	ControllPort = 0b00000001;
    1b24:	e8 e3       	ldi	r30, 0x38	; 56
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	80 83       	st	Z, r24
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e8       	ldi	r26, 0x80	; 128
    1b32:	bf e3       	ldi	r27, 0x3F	; 63
    1b34:	8b 87       	std	Y+11, r24	; 0x0b
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	ad 87       	std	Y+13, r26	; 0x0d
    1b3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a ef       	ldi	r20, 0xFA	; 250
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8f 83       	std	Y+7, r24	; 0x07
    1b56:	98 87       	std	Y+8, r25	; 0x08
    1b58:	a9 87       	std	Y+9, r26	; 0x09
    1b5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <LCD_SendChar+0x16c>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <LCD_SendChar+0x1ea>
	else if (__tmp > 65535)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <LCD_SendChar+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <LCD_SendChar+0x1cc>
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_SendChar+0x1ba>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <LCD_SendChar+0x1ae>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <LCD_SendChar+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_SendChar+0x1f6>
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c10:	6d 96       	adiw	r28, 0x1d	; 29
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <LCD_SendString>:

void LCD_SendString(char Arr[]) {
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <LCD_SendString+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <LCD_SendString+0x8>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03

	for (int i = 0; Arr[i] != '\0'; i++) {
    1c32:	1a 82       	std	Y+2, r1	; 0x02
    1c34:	19 82       	std	Y+1, r1	; 0x01
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_SendString+0x34>
		LCD_SendChar(Arr[i]);
    1c38:	29 81       	ldd	r18, Y+1	; 0x01
    1c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	80 81       	ld	r24, Z
    1c48:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
	_delay_ms(1);
}

void LCD_SendString(char Arr[]) {

	for (int i = 0; Arr[i] != '\0'; i++) {
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	29 81       	ldd	r18, Y+1	; 0x01
    1c58:	3a 81       	ldd	r19, Y+2	; 0x02
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e2 0f       	add	r30, r18
    1c62:	f3 1f       	adc	r31, r19
    1c64:	80 81       	ld	r24, Z
    1c66:	88 23       	and	r24, r24
    1c68:	39 f7       	brne	.-50     	; 0x1c38 <LCD_SendString+0x16>
		LCD_SendChar(Arr[i]);

	}
	return;
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <LCD_SendIntNumb>:

void LCD_SendIntNumb(int Numb) {
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	2a 97       	sbiw	r28, 0x0a	; 10
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	9a 87       	std	Y+10, r25	; 0x0a
    1c8e:	89 87       	std	Y+9, r24	; 0x09
	int Numb_Size = 0;
    1c90:	1a 82       	std	Y+2, r1	; 0x02
    1c92:	19 82       	std	Y+1, r1	; 0x01
	int Numb_Copy[3];
	for (Numb_Size = 0; Numb > 0; Numb_Size++) {
    1c94:	1a 82       	std	Y+2, r1	; 0x02
    1c96:	19 82       	std	Y+1, r1	; 0x01
    1c98:	24 c0       	rjmp	.+72     	; 0x1ce2 <LCD_SendIntNumb+0x6a>
		Numb_Copy[Numb_Size] = Numb % 10;
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	2a e0       	ldi	r18, 0x0A	; 10
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__divmodhi4>
    1cac:	ac 01       	movw	r20, r24
    1cae:	9f 01       	movw	r18, r30
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	32 96       	adiw	r30, 0x02	; 2
    1cc0:	51 83       	std	Z+1, r21	; 0x01
    1cc2:	40 83       	st	Z, r20
		Numb /= 10;
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	2a e0       	ldi	r18, 0x0A	; 10
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	b9 01       	movw	r22, r18
    1cce:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__divmodhi4>
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9a 87       	std	Y+10, r25	; 0x0a
    1cd6:	89 87       	std	Y+9, r24	; 0x09
}

void LCD_SendIntNumb(int Numb) {
	int Numb_Size = 0;
	int Numb_Copy[3];
	for (Numb_Size = 0; Numb > 0; Numb_Size++) {
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	18 16       	cp	r1, r24
    1ce8:	19 06       	cpc	r1, r25
    1cea:	bc f2       	brlt	.-82     	; 0x1c9a <LCD_SendIntNumb+0x22>
		Numb_Copy[Numb_Size] = Numb % 10;
		Numb /= 10;

	}
	Numb_Size -= 1;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	15 c0       	rjmp	.+42     	; 0x1d22 <LCD_SendIntNumb+0xaa>
	for (; Numb_Size >= 0; Numb_Size--) {
		LCD_SendChar(Numb_Copy[Numb_Size] + 48);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	9c 01       	movw	r18, r24
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	ce 01       	movw	r24, r28
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	32 96       	adiw	r30, 0x02	; 2
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	80 5d       	subi	r24, 0xD0	; 208
    1d14:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
		Numb_Copy[Numb_Size] = Numb % 10;
		Numb /= 10;

	}
	Numb_Size -= 1;
	for (; Numb_Size >= 0; Numb_Size--) {
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	99 23       	and	r25, r25
    1d28:	3c f7       	brge	.-50     	; 0x1cf8 <LCD_SendIntNumb+0x80>
		LCD_SendChar(Numb_Copy[Numb_Size] + 48);
	}
	return;
}
    1d2a:	2a 96       	adiw	r28, 0x0a	; 10
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <LCD_Calculator>:

void LCD_Calculator(int Numb1, char opp, int Numb2) {
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	27 97       	sbiw	r28, 0x07	; 7
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	6b 83       	std	Y+3, r22	; 0x03
    1d56:	5d 83       	std	Y+5, r21	; 0x05
    1d58:	4c 83       	std	Y+4, r20	; 0x04
	switch (opp) {
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3f 83       	std	Y+7, r19	; 0x07
    1d62:	2e 83       	std	Y+6, r18	; 0x06
    1d64:	4e 81       	ldd	r20, Y+6	; 0x06
    1d66:	5f 81       	ldd	r21, Y+7	; 0x07
    1d68:	4b 32       	cpi	r20, 0x2B	; 43
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	b1 f0       	breq	.+44     	; 0x1d9a <LCD_Calculator+0x5e>
    1d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d70:	9f 81       	ldd	r25, Y+7	; 0x07
    1d72:	8c 32       	cpi	r24, 0x2C	; 44
    1d74:	91 05       	cpc	r25, r1
    1d76:	34 f4       	brge	.+12     	; 0x1d84 <LCD_Calculator+0x48>
    1d78:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d7c:	2a 32       	cpi	r18, 0x2A	; 42
    1d7e:	31 05       	cpc	r19, r1
    1d80:	89 f1       	breq	.+98     	; 0x1de4 <LCD_Calculator+0xa8>
    1d82:	49 c0       	rjmp	.+146    	; 0x1e16 <LCD_Calculator+0xda>
    1d84:	4e 81       	ldd	r20, Y+6	; 0x06
    1d86:	5f 81       	ldd	r21, Y+7	; 0x07
    1d88:	4d 32       	cpi	r20, 0x2D	; 45
    1d8a:	51 05       	cpc	r21, r1
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <LCD_Calculator+0x70>
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	9f 81       	ldd	r25, Y+7	; 0x07
    1d92:	8f 32       	cpi	r24, 0x2F	; 47
    1d94:	91 05       	cpc	r25, r1
    1d96:	a9 f1       	breq	.+106    	; 0x1e02 <LCD_Calculator+0xc6>
    1d98:	3e c0       	rjmp	.+124    	; 0x1e16 <LCD_Calculator+0xda>
	case '+':
		LCD_SendIntNumb(Numb1 + Numb2);
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1da0:	3d 81       	ldd	r19, Y+5	; 0x05
    1da2:	82 0f       	add	r24, r18
    1da4:	93 1f       	adc	r25, r19
    1da6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_SendIntNumb>
    1daa:	35 c0       	rjmp	.+106    	; 0x1e16 <LCD_Calculator+0xda>
		break;
	case '-':
		if (Numb1 < Numb2) {
    1dac:	29 81       	ldd	r18, Y+1	; 0x01
    1dae:	3a 81       	ldd	r19, Y+2	; 0x02
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	9d 81       	ldd	r25, Y+5	; 0x05
    1db4:	28 17       	cp	r18, r24
    1db6:	39 07       	cpc	r19, r25
    1db8:	64 f4       	brge	.+24     	; 0x1dd2 <LCD_Calculator+0x96>
			LCD_SendChar('-');
    1dba:	8d e2       	ldi	r24, 0x2D	; 45
    1dbc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
			LCD_SendIntNumb(Numb2 - Numb1);
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc4:	29 81       	ldd	r18, Y+1	; 0x01
    1dc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc8:	82 1b       	sub	r24, r18
    1dca:	93 0b       	sbc	r25, r19
    1dcc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_SendIntNumb>
    1dd0:	22 c0       	rjmp	.+68     	; 0x1e16 <LCD_Calculator+0xda>

		} else {
			LCD_SendIntNumb(Numb1 - Numb2);
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	82 1b       	sub	r24, r18
    1ddc:	93 0b       	sbc	r25, r19
    1dde:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_SendIntNumb>
    1de2:	19 c0       	rjmp	.+50     	; 0x1e16 <LCD_Calculator+0xda>
		}
		break;

	case '*':
		LCD_SendIntNumb(Numb1 * Numb2);
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dea:	3d 81       	ldd	r19, Y+5	; 0x05
    1dec:	ac 01       	movw	r20, r24
    1dee:	42 9f       	mul	r20, r18
    1df0:	c0 01       	movw	r24, r0
    1df2:	43 9f       	mul	r20, r19
    1df4:	90 0d       	add	r25, r0
    1df6:	52 9f       	mul	r21, r18
    1df8:	90 0d       	add	r25, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_SendIntNumb>
    1e00:	0a c0       	rjmp	.+20     	; 0x1e16 <LCD_Calculator+0xda>
		break;
	case '/':
		LCD_SendIntNumb(Numb1 / Numb2);
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	2c 81       	ldd	r18, Y+4	; 0x04
    1e08:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0a:	b9 01       	movw	r22, r18
    1e0c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__divmodhi4>
    1e10:	cb 01       	movw	r24, r22
    1e12:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_SendIntNumb>
		break;
	default:
		break;
	}

}
    1e16:	27 96       	adiw	r28, 0x07	; 7
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LCD_voidGoto>:
void LCD_voidGoto (u8 A_u8ROW,u8 A_u8COL){
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <LCD_voidGoto+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <LCD_voidGoto+0x8>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	8b 83       	std	Y+3, r24	; 0x03
    1e36:	6c 83       	std	Y+4, r22	; 0x04
	u8 L_u8DDRRAMAddress;
	u8 L_u8Command;

	if ((A_u8ROW <= 1) &&( A_u8COL <= 15))
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	90 f4       	brcc	.+36     	; 0x1e62 <LCD_voidGoto+0x3a>
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	80 31       	cpi	r24, 0x10	; 16
    1e42:	78 f4       	brcc	.+30     	; 0x1e62 <LCD_voidGoto+0x3a>
	{
		if (A_u8ROW  == FIREST_ROW_IDX){
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	88 23       	and	r24, r24
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <LCD_voidGoto+0x28>
			L_u8DDRRAMAddress = FIREST_ROW_START + A_u8COL;
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <LCD_voidGoto+0x2e>
		}
		else
		{
			L_u8DDRRAMAddress = SECOND_ROW_START + A_u8COL;
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	80 5c       	subi	r24, 0xC0	; 192
    1e54:	8a 83       	std	Y+2, r24	; 0x02
		}
		L_u8Command = L_u8DDRRAMAddress | SET_AC_MASK;
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	80 68       	ori	r24, 0x80	; 128
    1e5a:	89 83       	std	Y+1, r24	; 0x01
		LCD_SendCom(L_u8Command);
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
	else
	{
		//Do No thing
	}

}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <LCD_WriteToCGRAM>:
void LCD_WriteToCGRAM (u8 A_u8PatternIdx , u8 *A_PatternVlaue )
{ u8 L_u8LoopIterator;
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <LCD_WriteToCGRAM+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <LCD_WriteToCGRAM+0x8>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <LCD_WriteToCGRAM+0xa>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	8a 83       	std	Y+2, r24	; 0x02
    1e80:	7c 83       	std	Y+4, r23	; 0x04
    1e82:	6b 83       	std	Y+3, r22	; 0x03

switch (A_u8PatternIdx)
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	3e 83       	std	Y+6, r19	; 0x06
    1e8c:	2d 83       	std	Y+5, r18	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	91 05       	cpc	r25, r1
    1e96:	a9 f1       	breq	.+106    	; 0x1f02 <LCD_WriteToCGRAM+0x92>
    1e98:	2d 81       	ldd	r18, Y+5	; 0x05
    1e9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9c:	24 30       	cpi	r18, 0x04	; 4
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	7c f4       	brge	.+30     	; 0x1ec0 <LCD_WriteToCGRAM+0x50>
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	19 f1       	breq	.+70     	; 0x1ef2 <LCD_WriteToCGRAM+0x82>
    1eac:	2d 81       	ldd	r18, Y+5	; 0x05
    1eae:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	14 f5       	brge	.+68     	; 0x1efa <LCD_WriteToCGRAM+0x8a>
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	b1 f0       	breq	.+44     	; 0x1eea <LCD_WriteToCGRAM+0x7a>
    1ebe:	34 c0       	rjmp	.+104    	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
    1ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ec4:	25 30       	cpi	r18, 0x05	; 5
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	21 f1       	breq	.+72     	; 0x1f12 <LCD_WriteToCGRAM+0xa2>
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	85 30       	cpi	r24, 0x05	; 5
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	dc f0       	brlt	.+54     	; 0x1f0a <LCD_WriteToCGRAM+0x9a>
    1ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed8:	26 30       	cpi	r18, 0x06	; 6
    1eda:	31 05       	cpc	r19, r1
    1edc:	f1 f0       	breq	.+60     	; 0x1f1a <LCD_WriteToCGRAM+0xaa>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	87 30       	cpi	r24, 0x07	; 7
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	e9 f0       	breq	.+58     	; 0x1f22 <LCD_WriteToCGRAM+0xb2>
    1ee8:	1f c0       	rjmp	.+62     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
{

case 0 :LCD_SendCom(0x40);break;
    1eea:	80 e4       	ldi	r24, 0x40	; 64
    1eec:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1ef0:	1b c0       	rjmp	.+54     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 1 :LCD_SendCom(0x48);break;
    1ef2:	88 e4       	ldi	r24, 0x48	; 72
    1ef4:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1ef8:	17 c0       	rjmp	.+46     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 2 :LCD_SendCom(0x56);break;
    1efa:	86 e5       	ldi	r24, 0x56	; 86
    1efc:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 3 :LCD_SendCom(0x64);break;
    1f02:	84 e6       	ldi	r24, 0x64	; 100
    1f04:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 4 :LCD_SendCom(0x72);break;
    1f0a:	82 e7       	ldi	r24, 0x72	; 114
    1f0c:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1f10:	0b c0       	rjmp	.+22     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 5 :LCD_SendCom(0x80);break;
    1f12:	80 e8       	ldi	r24, 0x80	; 128
    1f14:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 6 :LCD_SendCom(0x88);break;
    1f1a:	88 e8       	ldi	r24, 0x88	; 136
    1f1c:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <LCD_WriteToCGRAM+0xb8>
case 7 :LCD_SendCom(0x96);break;
    1f22:	86 e9       	ldi	r24, 0x96	; 150
    1f24:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
default : break;
}



for(L_u8LoopIterator = 0; L_u8LoopIterator<8;L_u8LoopIterator++){
    1f28:	19 82       	std	Y+1, r1	; 0x01
    1f2a:	0e c0       	rjmp	.+28     	; 0x1f48 <LCD_WriteToCGRAM+0xd8>

 		LCD_SendChar(A_PatternVlaue[L_u8LoopIterator]);
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	fc 01       	movw	r30, r24
    1f38:	e2 0f       	add	r30, r18
    1f3a:	f3 1f       	adc	r31, r19
    1f3c:	80 81       	ld	r24, Z
    1f3e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
default : break;
}



for(L_u8LoopIterator = 0; L_u8LoopIterator<8;L_u8LoopIterator++){
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	88 30       	cpi	r24, 0x08	; 8
    1f4c:	78 f3       	brcs	.-34     	; 0x1f2c <LCD_WriteToCGRAM+0xbc>

 		LCD_SendChar(A_PatternVlaue[L_u8LoopIterator]);
 	}

return;}
    1f4e:	26 96       	adiw	r28, 0x06	; 6
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <main>:
u8 Points =0;
void Clear_Blok(u8 *POS);
void END_GAME (void);
void Seed(void);
void Block(void);
int main(void) {
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	e5 97       	sbiw	r28, 0x35	; 53
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
	u8 Packman1[] = {0x00, 0x0E, 0x1F, 0x1C, 0x1C, 0x1F, 0x0E, 0x00};
    1f74:	ce 01       	movw	r24, r28
    1f76:	0f 96       	adiw	r24, 0x0f	; 15
    1f78:	98 a7       	std	Y+40, r25	; 0x28
    1f7a:	8f a3       	std	Y+39, r24	; 0x27
    1f7c:	eb eb       	ldi	r30, 0xBB	; 187
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	fa a7       	std	Y+42, r31	; 0x2a
    1f82:	e9 a7       	std	Y+41, r30	; 0x29
    1f84:	f8 e0       	ldi	r31, 0x08	; 8
    1f86:	fb a7       	std	Y+43, r31	; 0x2b
    1f88:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f8a:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f8c:	00 80       	ld	r0, Z
    1f8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	9a a7       	std	Y+42, r25	; 0x2a
    1f96:	89 a7       	std	Y+41, r24	; 0x29
    1f98:	ef a1       	ldd	r30, Y+39	; 0x27
    1f9a:	f8 a5       	ldd	r31, Y+40	; 0x28
    1f9c:	00 82       	st	Z, r0
    1f9e:	8f a1       	ldd	r24, Y+39	; 0x27
    1fa0:	98 a5       	ldd	r25, Y+40	; 0x28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	98 a7       	std	Y+40, r25	; 0x28
    1fa6:	8f a3       	std	Y+39, r24	; 0x27
    1fa8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	9b a7       	std	Y+43, r25	; 0x2b
    1fae:	eb a5       	ldd	r30, Y+43	; 0x2b
    1fb0:	ee 23       	and	r30, r30
    1fb2:	51 f7       	brne	.-44     	; 0x1f88 <main+0x28>
	u8 Packman2[] = {0x00, 0x0E, 0x1F, 0x1D, 0x1F, 0x1F, 0x0E, 0x00};
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	47 96       	adiw	r24, 0x17	; 23
    1fb8:	9d a7       	std	Y+45, r25	; 0x2d
    1fba:	8c a7       	std	Y+44, r24	; 0x2c
    1fbc:	e3 eb       	ldi	r30, 0xB3	; 179
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	ff a7       	std	Y+47, r31	; 0x2f
    1fc2:	ee a7       	std	Y+46, r30	; 0x2e
    1fc4:	f8 e0       	ldi	r31, 0x08	; 8
    1fc6:	f8 ab       	std	Y+48, r31	; 0x30
    1fc8:	ee a5       	ldd	r30, Y+46	; 0x2e
    1fca:	ff a5       	ldd	r31, Y+47	; 0x2f
    1fcc:	00 80       	ld	r0, Z
    1fce:	8e a5       	ldd	r24, Y+46	; 0x2e
    1fd0:	9f a5       	ldd	r25, Y+47	; 0x2f
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	9f a7       	std	Y+47, r25	; 0x2f
    1fd6:	8e a7       	std	Y+46, r24	; 0x2e
    1fd8:	ec a5       	ldd	r30, Y+44	; 0x2c
    1fda:	fd a5       	ldd	r31, Y+45	; 0x2d
    1fdc:	00 82       	st	Z, r0
    1fde:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fe0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	9d a7       	std	Y+45, r25	; 0x2d
    1fe6:	8c a7       	std	Y+44, r24	; 0x2c
    1fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fea:	91 50       	subi	r25, 0x01	; 1
    1fec:	98 ab       	std	Y+48, r25	; 0x30
    1fee:	e8 a9       	ldd	r30, Y+48	; 0x30
    1ff0:	ee 23       	and	r30, r30
    1ff2:	51 f7       	brne	.-44     	; 0x1fc8 <main+0x68>
	u8 Packman3[] = {0x00, 0x0E, 0x1F, 0x07, 0x07, 0x1F, 0x0E, 0x00};
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	4f 96       	adiw	r24, 0x1f	; 31
    1ff8:	9a ab       	std	Y+50, r25	; 0x32
    1ffa:	89 ab       	std	Y+49, r24	; 0x31
    1ffc:	eb ea       	ldi	r30, 0xAB	; 171
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	fc ab       	std	Y+52, r31	; 0x34
    2002:	eb ab       	std	Y+51, r30	; 0x33
    2004:	f8 e0       	ldi	r31, 0x08	; 8
    2006:	fd ab       	std	Y+53, r31	; 0x35
    2008:	eb a9       	ldd	r30, Y+51	; 0x33
    200a:	fc a9       	ldd	r31, Y+52	; 0x34
    200c:	00 80       	ld	r0, Z
    200e:	8b a9       	ldd	r24, Y+51	; 0x33
    2010:	9c a9       	ldd	r25, Y+52	; 0x34
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	9c ab       	std	Y+52, r25	; 0x34
    2016:	8b ab       	std	Y+51, r24	; 0x33
    2018:	e9 a9       	ldd	r30, Y+49	; 0x31
    201a:	fa a9       	ldd	r31, Y+50	; 0x32
    201c:	00 82       	st	Z, r0
    201e:	89 a9       	ldd	r24, Y+49	; 0x31
    2020:	9a a9       	ldd	r25, Y+50	; 0x32
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	9a ab       	std	Y+50, r25	; 0x32
    2026:	89 ab       	std	Y+49, r24	; 0x31
    2028:	9d a9       	ldd	r25, Y+53	; 0x35
    202a:	91 50       	subi	r25, 0x01	; 1
    202c:	9d ab       	std	Y+53, r25	; 0x35
    202e:	ed a9       	ldd	r30, Y+53	; 0x35
    2030:	ee 23       	and	r30, r30
    2032:	51 f7       	brne	.-44     	; 0x2008 <main+0xa8>
LCD_Init();
    2034:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_Init>
DDRD = 0x00;
    2038:	e1 e3       	ldi	r30, 0x31	; 49
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	10 82       	st	Z, r1
PORTD=0xff;
    203e:	e2 e3       	ldi	r30, 0x32	; 50
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	80 83       	st	Z, r24

LCD_WriteToCGRAM(0,Packman1);
    2046:	9e 01       	movw	r18, r28
    2048:	21 5f       	subi	r18, 0xF1	; 241
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	b9 01       	movw	r22, r18
    2050:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_WriteToCGRAM>
LCD_WriteToCGRAM(1,Packman2);
    2054:	9e 01       	movw	r18, r28
    2056:	29 5e       	subi	r18, 0xE9	; 233
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	b9 01       	movw	r22, r18
    205e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_WriteToCGRAM>
LCD_WriteToCGRAM(2,Packman3);
    2062:	9e 01       	movw	r18, r28
    2064:	21 5e       	subi	r18, 0xE1	; 225
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	b9 01       	movw	r22, r18
    206c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_WriteToCGRAM>
LCD_CLEAR;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>

while (1)
	{
	packManUpdate(Get_Bot());
    2076:	0e 94 0d 12 	call	0x241a	; 0x241a <Get_Bot>
    207a:	0e 94 00 11 	call	0x2200	; 0x2200 <packManUpdate>

EnmiUpdate();
    207e:	0e 94 ba 10 	call	0x2174	; 0x2174 <EnmiUpdate>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a8 e4       	ldi	r26, 0x48	; 72
    2088:	b2 e4       	ldi	r27, 0x42	; 66
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <main+0x174>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <main+0x1f2>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <main+0x1d4>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <main+0x1c2>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <main+0x1b6>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <main+0x1fe>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(50);
Seed ();
    2166:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <Seed>
Block();
    216a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <Block>
END_GAME ();
    216e:	0e 94 75 14 	call	0x28ea	; 0x28ea <END_GAME>
    2172:	81 cf       	rjmp	.-254    	; 0x2076 <main+0x116>

00002174 <EnmiUpdate>:
	}

	return 0;
}
void EnmiUpdate(void)
{u8 static direction = 1;
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
u8 static Speed = 0;
u8 animataion = 0;
    217e:	19 82       	std	Y+1, r1	; 0x01
	if(Speed <= 7){Speed ++;}
    2180:	80 91 c8 00 	lds	r24, 0x00C8
    2184:	88 30       	cpi	r24, 0x08	; 8
    2186:	30 f4       	brcc	.+12     	; 0x2194 <EnmiUpdate+0x20>
    2188:	80 91 c8 00 	lds	r24, 0x00C8
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	80 93 c8 00 	sts	0x00C8, r24
    2192:	28 c0       	rjmp	.+80     	; 0x21e4 <EnmiUpdate+0x70>
	else{
Clear_Blok(Enmi_Pos);
    2194:	8a e8       	ldi	r24, 0x8A	; 138
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 4e 14 	call	0x289c	; 0x289c <Clear_Blok>
if(direction ==1){
    219c:	80 91 aa 00 	lds	r24, 0x00AA
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	61 f4       	brne	.+24     	; 0x21bc <EnmiUpdate+0x48>
Enmi_Pos[1]++;
    21a4:	80 91 8b 00 	lds	r24, 0x008B
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	80 93 8b 00 	sts	0x008B, r24
if	(Enmi_Pos[1] ==12){
    21ae:	80 91 8b 00 	lds	r24, 0x008B
    21b2:	8c 30       	cpi	r24, 0x0C	; 12
    21b4:	19 f4       	brne	.+6      	; 0x21bc <EnmiUpdate+0x48>
	direction =0;
    21b6:	10 92 aa 00 	sts	0x00AA, r1
	animataion = 0;
    21ba:	19 82       	std	Y+1, r1	; 0x01
}

}
if(direction == 0){
    21bc:	80 91 aa 00 	lds	r24, 0x00AA
    21c0:	88 23       	and	r24, r24
    21c2:	71 f4       	brne	.+28     	; 0x21e0 <EnmiUpdate+0x6c>
	Enmi_Pos[1]--;
    21c4:	80 91 8b 00 	lds	r24, 0x008B
    21c8:	81 50       	subi	r24, 0x01	; 1
    21ca:	80 93 8b 00 	sts	0x008B, r24
	if	(Enmi_Pos[1] ==6){
    21ce:	80 91 8b 00 	lds	r24, 0x008B
    21d2:	86 30       	cpi	r24, 0x06	; 6
    21d4:	29 f4       	brne	.+10     	; 0x21e0 <EnmiUpdate+0x6c>
		direction =1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	80 93 aa 00 	sts	0x00AA, r24
		animataion = 2;
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	89 83       	std	Y+1, r24	; 0x01
	}

}
Speed =0;
    21e0:	10 92 c8 00 	sts	0x00C8, r1
}
LCD_voidGoto(Enmi_Pos[0],Enmi_Pos[1]);
    21e4:	80 91 8a 00 	lds	r24, 0x008A
    21e8:	90 91 8b 00 	lds	r25, 0x008B
    21ec:	69 2f       	mov	r22, r25
    21ee:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendChar(2);
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
}
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <packManUpdate>:
void packManUpdate(u8 A_u8new_pos)
{u8 static Speed = 0;
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <packManUpdate+0x6>
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	89 83       	std	Y+1, r24	; 0x01
if(Speed <= 5){Speed ++;}
    220e:	80 91 c9 00 	lds	r24, 0x00C9
    2212:	86 30       	cpi	r24, 0x06	; 6
    2214:	30 f4       	brcc	.+12     	; 0x2222 <packManUpdate+0x22>
    2216:	80 91 c9 00 	lds	r24, 0x00C9
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	80 93 c9 00 	sts	0x00C9, r24
    2220:	f6 c0       	rjmp	.+492    	; 0x240e <packManUpdate+0x20e>
else{
	LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    2222:	80 91 c5 00 	lds	r24, 0x00C5
    2226:	90 91 c6 00 	lds	r25, 0x00C6
    222a:	69 2f       	mov	r22, r25
    222c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>

	switch(A_u8new_pos){
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3b 83       	std	Y+3, r19	; 0x03
    2238:	2a 83       	std	Y+2, r18	; 0x02
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <packManUpdate+0x46>
    2244:	46 c0       	rjmp	.+140    	; 0x22d2 <packManUpdate+0xd2>
    2246:	2a 81       	ldd	r18, Y+2	; 0x02
    2248:	3b 81       	ldd	r19, Y+3	; 0x03
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	2c f4       	brge	.+10     	; 0x225a <packManUpdate+0x5a>
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	71 f0       	breq	.+28     	; 0x2274 <packManUpdate+0x74>
    2258:	ba c0       	rjmp	.+372    	; 0x23ce <packManUpdate+0x1ce>
    225a:	2a 81       	ldd	r18, Y+2	; 0x02
    225c:	3b 81       	ldd	r19, Y+3	; 0x03
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <packManUpdate+0x66>
    2264:	65 c0       	rjmp	.+202    	; 0x2330 <packManUpdate+0x130>
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	83 30       	cpi	r24, 0x03	; 3
    226c:	91 05       	cpc	r25, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <packManUpdate+0x72>
    2270:	8c c0       	rjmp	.+280    	; 0x238a <packManUpdate+0x18a>
    2272:	ad c0       	rjmp	.+346    	; 0x23ce <packManUpdate+0x1ce>
case RIGHT : if((pacMan_Pos[1] >= 15)||((pacMan_Pos[1] == 4)&&pacMan_Pos[0] == 0)){/*do no thing*/}
    2274:	80 91 c6 00 	lds	r24, 0x00C6
    2278:	8f 30       	cpi	r24, 0x0F	; 15
    227a:	08 f0       	brcs	.+2      	; 0x227e <packManUpdate+0x7e>
    227c:	a8 c0       	rjmp	.+336    	; 0x23ce <packManUpdate+0x1ce>
    227e:	80 91 c6 00 	lds	r24, 0x00C6
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	29 f4       	brne	.+10     	; 0x2290 <packManUpdate+0x90>
    2286:	80 91 c5 00 	lds	r24, 0x00C5
    228a:	88 23       	and	r24, r24
    228c:	09 f4       	brne	.+2      	; 0x2290 <packManUpdate+0x90>
    228e:	9f c0       	rjmp	.+318    	; 0x23ce <packManUpdate+0x1ce>
else{LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    2290:	80 91 c5 00 	lds	r24, 0x00C5
    2294:	90 91 c6 00 	lds	r25, 0x00C6
    2298:	69 2f       	mov	r22, r25
    229a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendChar(0b11111110);
    229e:	8e ef       	ldi	r24, 0xFE	; 254
    22a0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    22a4:	80 91 c5 00 	lds	r24, 0x00C5
    22a8:	90 91 c6 00 	lds	r25, 0x00C6
    22ac:	69 2f       	mov	r22, r25
    22ae:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]+1);pacMan_Pos[1]+=1;break;
    22b2:	20 91 c5 00 	lds	r18, 0x00C5
    22b6:	80 91 c6 00 	lds	r24, 0x00C6
    22ba:	98 2f       	mov	r25, r24
    22bc:	9f 5f       	subi	r25, 0xFF	; 255
    22be:	82 2f       	mov	r24, r18
    22c0:	69 2f       	mov	r22, r25
    22c2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
    22c6:	80 91 c6 00 	lds	r24, 0x00C6
    22ca:	8f 5f       	subi	r24, 0xFF	; 255
    22cc:	80 93 c6 00 	sts	0x00C6, r24
    22d0:	7e c0       	rjmp	.+252    	; 0x23ce <packManUpdate+0x1ce>
}break;
case LEFT : if((pacMan_Pos[1] == 0)||((pacMan_Pos[1] == 6)&&pacMan_Pos[0] == 0)){/*do no thing*/}
    22d2:	80 91 c6 00 	lds	r24, 0x00C6
    22d6:	88 23       	and	r24, r24
    22d8:	09 f4       	brne	.+2      	; 0x22dc <packManUpdate+0xdc>
    22da:	79 c0       	rjmp	.+242    	; 0x23ce <packManUpdate+0x1ce>
    22dc:	80 91 c6 00 	lds	r24, 0x00C6
    22e0:	86 30       	cpi	r24, 0x06	; 6
    22e2:	29 f4       	brne	.+10     	; 0x22ee <packManUpdate+0xee>
    22e4:	80 91 c5 00 	lds	r24, 0x00C5
    22e8:	88 23       	and	r24, r24
    22ea:	09 f4       	brne	.+2      	; 0x22ee <packManUpdate+0xee>
    22ec:	70 c0       	rjmp	.+224    	; 0x23ce <packManUpdate+0x1ce>

else{LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    22ee:	80 91 c5 00 	lds	r24, 0x00C5
    22f2:	90 91 c6 00 	lds	r25, 0x00C6
    22f6:	69 2f       	mov	r22, r25
    22f8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendChar(0b11111110);
    22fc:	8e ef       	ldi	r24, 0xFE	; 254
    22fe:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    2302:	80 91 c5 00 	lds	r24, 0x00C5
    2306:	90 91 c6 00 	lds	r25, 0x00C6
    230a:	69 2f       	mov	r22, r25
    230c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]-1);pacMan_Pos[1]-=1;break;
    2310:	20 91 c5 00 	lds	r18, 0x00C5
    2314:	80 91 c6 00 	lds	r24, 0x00C6
    2318:	98 2f       	mov	r25, r24
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	82 2f       	mov	r24, r18
    231e:	69 2f       	mov	r22, r25
    2320:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
    2324:	80 91 c6 00 	lds	r24, 0x00C6
    2328:	81 50       	subi	r24, 0x01	; 1
    232a:	80 93 c6 00 	sts	0x00C6, r24
    232e:	4f c0       	rjmp	.+158    	; 0x23ce <packManUpdate+0x1ce>
}break;
case UP :
	if((pacMan_Pos[0] == 0)||((pacMan_Pos[1] == 5)&&pacMan_Pos[0] == 1)){/*do no thing*/}
    2330:	80 91 c5 00 	lds	r24, 0x00C5
    2334:	88 23       	and	r24, r24
    2336:	09 f4       	brne	.+2      	; 0x233a <packManUpdate+0x13a>
    2338:	4a c0       	rjmp	.+148    	; 0x23ce <packManUpdate+0x1ce>
    233a:	80 91 c6 00 	lds	r24, 0x00C6
    233e:	85 30       	cpi	r24, 0x05	; 5
    2340:	29 f4       	brne	.+10     	; 0x234c <packManUpdate+0x14c>
    2342:	80 91 c5 00 	lds	r24, 0x00C5
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	09 f4       	brne	.+2      	; 0x234c <packManUpdate+0x14c>
    234a:	41 c0       	rjmp	.+130    	; 0x23ce <packManUpdate+0x1ce>
	else{LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    234c:	80 91 c5 00 	lds	r24, 0x00C5
    2350:	90 91 c6 00 	lds	r25, 0x00C6
    2354:	69 2f       	mov	r22, r25
    2356:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_SendChar(0b11111110);
    235a:	8e ef       	ldi	r24, 0xFE	; 254
    235c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
	LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    2360:	80 91 c5 00 	lds	r24, 0x00C5
    2364:	90 91 c6 00 	lds	r25, 0x00C6
    2368:	69 2f       	mov	r22, r25
    236a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_voidGoto(pacMan_Pos[0]-1,pacMan_Pos[1]);pacMan_Pos[0]-=1;break;
    236e:	80 91 c5 00 	lds	r24, 0x00C5
    2372:	81 50       	subi	r24, 0x01	; 1
    2374:	90 91 c6 00 	lds	r25, 0x00C6
    2378:	69 2f       	mov	r22, r25
    237a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
    237e:	80 91 c5 00 	lds	r24, 0x00C5
    2382:	81 50       	subi	r24, 0x01	; 1
    2384:	80 93 c5 00 	sts	0x00C5, r24
    2388:	22 c0       	rjmp	.+68     	; 0x23ce <packManUpdate+0x1ce>
	}break;
case DOWN :if(pacMan_Pos[0] == 1){/*do no thing*/}
    238a:	80 91 c5 00 	lds	r24, 0x00C5
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	f1 f0       	breq	.+60     	; 0x23ce <packManUpdate+0x1ce>
else{LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    2392:	80 91 c5 00 	lds	r24, 0x00C5
    2396:	90 91 c6 00 	lds	r25, 0x00C6
    239a:	69 2f       	mov	r22, r25
    239c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendChar(0b11111110);
    23a0:	8e ef       	ldi	r24, 0xFE	; 254
    23a2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    23a6:	80 91 c5 00 	lds	r24, 0x00C5
    23aa:	90 91 c6 00 	lds	r25, 0x00C6
    23ae:	69 2f       	mov	r22, r25
    23b0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_voidGoto(pacMan_Pos[0]+1,pacMan_Pos[1]);pacMan_Pos[0]+=1;break;
    23b4:	80 91 c5 00 	lds	r24, 0x00C5
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	90 91 c6 00 	lds	r25, 0x00C6
    23be:	69 2f       	mov	r22, r25
    23c0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
    23c4:	80 91 c5 00 	lds	r24, 0x00C5
    23c8:	8f 5f       	subi	r24, 0xFF	; 255
    23ca:	80 93 c5 00 	sts	0x00C5, r24
}break;

default :break;
}
if(Animation ==1){	Animation = 0;}
    23ce:	80 91 c4 00 	lds	r24, 0x00C4
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	19 f4       	brne	.+6      	; 0x23dc <packManUpdate+0x1dc>
    23d6:	10 92 c4 00 	sts	0x00C4, r1
    23da:	07 c0       	rjmp	.+14     	; 0x23ea <packManUpdate+0x1ea>
else if(Animation ==0){	Animation = 1;}
    23dc:	80 91 c4 00 	lds	r24, 0x00C4
    23e0:	88 23       	and	r24, r24
    23e2:	19 f4       	brne	.+6      	; 0x23ea <packManUpdate+0x1ea>
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	80 93 c4 00 	sts	0x00C4, r24
LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);
    23ea:	80 91 c5 00 	lds	r24, 0x00C5
    23ee:	90 91 c6 00 	lds	r25, 0x00C6
    23f2:	69 2f       	mov	r22, r25
    23f4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendChar(Animation);
    23f8:	80 91 c4 00 	lds	r24, 0x00C4
    23fc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
LCD_voidGoto(pacMan_Pos[0],pacMan_Pos[1]);}
    2400:	80 91 c5 00 	lds	r24, 0x00C5
    2404:	90 91 c6 00 	lds	r25, 0x00C6
    2408:	69 2f       	mov	r22, r25
    240a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
return;
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <Get_Bot>:
u8 Get_Bot(void)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	e9 97       	sbiw	r28, 0x39	; 57
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
if(Get_Bit(PIND,0)==0){while(Get_Bit(PIND,0)==0){}_delay_ms(10);return RIGHT;}
    242e:	e0 e3       	ldi	r30, 0x30	; 48
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	81 70       	andi	r24, 0x01	; 1
    243a:	90 70       	andi	r25, 0x00	; 0
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	09 f0       	breq	.+2      	; 0x2442 <Get_Bot+0x28>
    2440:	7d c0       	rjmp	.+250    	; 0x253c <Get_Bot+0x122>
    2442:	e0 e3       	ldi	r30, 0x30	; 48
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	81 70       	andi	r24, 0x01	; 1
    244e:	90 70       	andi	r25, 0x00	; 0
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	b9 f3       	breq	.-18     	; 0x2442 <Get_Bot+0x28>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e2       	ldi	r26, 0x20	; 32
    245a:	b1 e4       	ldi	r27, 0x41	; 65
    245c:	8d ab       	std	Y+53, r24	; 0x35
    245e:	9e ab       	std	Y+54, r25	; 0x36
    2460:	af ab       	std	Y+55, r26	; 0x37
    2462:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	6d a9       	ldd	r22, Y+53	; 0x35
    2466:	7e a9       	ldd	r23, Y+54	; 0x36
    2468:	8f a9       	ldd	r24, Y+55	; 0x37
    246a:	98 ad       	ldd	r25, Y+56	; 0x38
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a ef       	ldi	r20, 0xFA	; 250
    2472:	54 e4       	ldi	r21, 0x44	; 68
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	89 ab       	std	Y+49, r24	; 0x31
    247e:	9a ab       	std	Y+50, r25	; 0x32
    2480:	ab ab       	std	Y+51, r26	; 0x33
    2482:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2484:	69 a9       	ldd	r22, Y+49	; 0x31
    2486:	7a a9       	ldd	r23, Y+50	; 0x32
    2488:	8b a9       	ldd	r24, Y+51	; 0x33
    248a:	9c a9       	ldd	r25, Y+52	; 0x34
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <Get_Bot+0x8c>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	98 ab       	std	Y+48, r25	; 0x30
    24a2:	8f a7       	std	Y+47, r24	; 0x2f
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <Get_Bot+0x10a>
	else if (__tmp > 65535)
    24a6:	69 a9       	ldd	r22, Y+49	; 0x31
    24a8:	7a a9       	ldd	r23, Y+50	; 0x32
    24aa:	8b a9       	ldd	r24, Y+51	; 0x33
    24ac:	9c a9       	ldd	r25, Y+52	; 0x34
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <Get_Bot+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	6d a9       	ldd	r22, Y+53	; 0x35
    24c0:	7e a9       	ldd	r23, Y+54	; 0x36
    24c2:	8f a9       	ldd	r24, Y+55	; 0x37
    24c4:	98 ad       	ldd	r25, Y+56	; 0x38
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	98 ab       	std	Y+48, r25	; 0x30
    24e4:	8f a7       	std	Y+47, r24	; 0x2f
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <Get_Bot+0xec>
    24e8:	88 ec       	ldi	r24, 0xC8	; 200
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	9e a7       	std	Y+46, r25	; 0x2e
    24ee:	8d a7       	std	Y+45, r24	; 0x2d
    24f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <Get_Bot+0xda>
    24f8:	9e a7       	std	Y+46, r25	; 0x2e
    24fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	98 ab       	std	Y+48, r25	; 0x30
    2504:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8f a5       	ldd	r24, Y+47	; 0x2f
    2508:	98 a9       	ldd	r25, Y+48	; 0x30
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <Get_Bot+0xce>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <Get_Bot+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	69 a9       	ldd	r22, Y+49	; 0x31
    2512:	7a a9       	ldd	r23, Y+50	; 0x32
    2514:	8b a9       	ldd	r24, Y+51	; 0x33
    2516:	9c a9       	ldd	r25, Y+52	; 0x34
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	98 ab       	std	Y+48, r25	; 0x30
    2522:	8f a7       	std	Y+47, r24	; 0x2f
    2524:	8f a5       	ldd	r24, Y+47	; 0x2f
    2526:	98 a9       	ldd	r25, Y+48	; 0x30
    2528:	9c a7       	std	Y+44, r25	; 0x2c
    252a:	8b a7       	std	Y+43, r24	; 0x2b
    252c:	8b a5       	ldd	r24, Y+43	; 0x2b
    252e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <Get_Bot+0x116>
    2534:	9c a7       	std	Y+44, r25	; 0x2c
    2536:	8b a7       	std	Y+43, r24	; 0x2b
    2538:	19 ae       	std	Y+57, r1	; 0x39
    253a:	a6 c1       	rjmp	.+844    	; 0x2888 <Get_Bot+0x46e>
if(Get_Bit(PIND,1)==0){while(Get_Bit(PIND,1)==0){}_delay_ms(10);return LEFT; }
    253c:	e0 e3       	ldi	r30, 0x30	; 48
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	86 95       	lsr	r24
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	81 70       	andi	r24, 0x01	; 1
    254a:	90 70       	andi	r25, 0x00	; 0
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	09 f0       	breq	.+2      	; 0x2552 <Get_Bot+0x138>
    2550:	7f c0       	rjmp	.+254    	; 0x2650 <Get_Bot+0x236>
    2552:	e0 e3       	ldi	r30, 0x30	; 48
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	86 95       	lsr	r24
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	81 70       	andi	r24, 0x01	; 1
    2560:	90 70       	andi	r25, 0x00	; 0
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	b1 f3       	breq	.-20     	; 0x2552 <Get_Bot+0x138>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e2       	ldi	r26, 0x20	; 32
    256c:	b1 e4       	ldi	r27, 0x41	; 65
    256e:	8f a3       	std	Y+39, r24	; 0x27
    2570:	98 a7       	std	Y+40, r25	; 0x28
    2572:	a9 a7       	std	Y+41, r26	; 0x29
    2574:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	6f a1       	ldd	r22, Y+39	; 0x27
    2578:	78 a5       	ldd	r23, Y+40	; 0x28
    257a:	89 a5       	ldd	r24, Y+41	; 0x29
    257c:	9a a5       	ldd	r25, Y+42	; 0x2a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8b a3       	std	Y+35, r24	; 0x23
    2590:	9c a3       	std	Y+36, r25	; 0x24
    2592:	ad a3       	std	Y+37, r26	; 0x25
    2594:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2596:	6b a1       	ldd	r22, Y+35	; 0x23
    2598:	7c a1       	ldd	r23, Y+36	; 0x24
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <Get_Bot+0x19e>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9a a3       	std	Y+34, r25	; 0x22
    25b4:	89 a3       	std	Y+33, r24	; 0x21
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <Get_Bot+0x21c>
	else if (__tmp > 65535)
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <Get_Bot+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	6f a1       	ldd	r22, Y+39	; 0x27
    25d2:	78 a5       	ldd	r23, Y+40	; 0x28
    25d4:	89 a5       	ldd	r24, Y+41	; 0x29
    25d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9a a3       	std	Y+34, r25	; 0x22
    25f6:	89 a3       	std	Y+33, r24	; 0x21
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <Get_Bot+0x1fe>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	98 a3       	std	Y+32, r25	; 0x20
    2600:	8f 8f       	std	Y+31, r24	; 0x1f
    2602:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2604:	98 a1       	ldd	r25, Y+32	; 0x20
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <Get_Bot+0x1ec>
    260a:	98 a3       	std	Y+32, r25	; 0x20
    260c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	89 a1       	ldd	r24, Y+33	; 0x21
    2610:	9a a1       	ldd	r25, Y+34	; 0x22
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9a a3       	std	Y+34, r25	; 0x22
    2616:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	89 a1       	ldd	r24, Y+33	; 0x21
    261a:	9a a1       	ldd	r25, Y+34	; 0x22
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <Get_Bot+0x1e0>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <Get_Bot+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6b a1       	ldd	r22, Y+35	; 0x23
    2624:	7c a1       	ldd	r23, Y+36	; 0x24
    2626:	8d a1       	ldd	r24, Y+37	; 0x25
    2628:	9e a1       	ldd	r25, Y+38	; 0x26
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9a a3       	std	Y+34, r25	; 0x22
    2634:	89 a3       	std	Y+33, r24	; 0x21
    2636:	89 a1       	ldd	r24, Y+33	; 0x21
    2638:	9a a1       	ldd	r25, Y+34	; 0x22
    263a:	9e 8f       	std	Y+30, r25	; 0x1e
    263c:	8d 8f       	std	Y+29, r24	; 0x1d
    263e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2640:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <Get_Bot+0x228>
    2646:	9e 8f       	std	Y+30, r25	; 0x1e
    2648:	8d 8f       	std	Y+29, r24	; 0x1d
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	89 af       	std	Y+57, r24	; 0x39
    264e:	1c c1       	rjmp	.+568    	; 0x2888 <Get_Bot+0x46e>
if(Get_Bit(PIND,2)==0){while(Get_Bit(PIND,2)==0){}_delay_ms(10);return UP; }
    2650:	e0 e3       	ldi	r30, 0x30	; 48
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	81 70       	andi	r24, 0x01	; 1
    2660:	90 70       	andi	r25, 0x00	; 0
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	09 f0       	breq	.+2      	; 0x2668 <Get_Bot+0x24e>
    2666:	80 c0       	rjmp	.+256    	; 0x2768 <Get_Bot+0x34e>
    2668:	e0 e3       	ldi	r30, 0x30	; 48
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	86 95       	lsr	r24
    2670:	86 95       	lsr	r24
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	a9 f3       	breq	.-22     	; 0x2668 <Get_Bot+0x24e>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 e2       	ldi	r26, 0x20	; 32
    2684:	b1 e4       	ldi	r27, 0x41	; 65
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	9a 8f       	std	Y+26, r25	; 0x1a
    268a:	ab 8f       	std	Y+27, r26	; 0x1b
    268c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	69 8d       	ldd	r22, Y+25	; 0x19
    2690:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2692:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2694:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8d 8b       	std	Y+21, r24	; 0x15
    26a8:	9e 8b       	std	Y+22, r25	; 0x16
    26aa:	af 8b       	std	Y+23, r26	; 0x17
    26ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ae:	6d 89       	ldd	r22, Y+21	; 0x15
    26b0:	7e 89       	ldd	r23, Y+22	; 0x16
    26b2:	8f 89       	ldd	r24, Y+23	; 0x17
    26b4:	98 8d       	ldd	r25, Y+24	; 0x18
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <Get_Bot+0x2b6>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <Get_Bot+0x334>
	else if (__tmp > 65535)
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <Get_Bot+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9c 8b       	std	Y+20, r25	; 0x14
    270e:	8b 8b       	std	Y+19, r24	; 0x13
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <Get_Bot+0x316>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9a 8b       	std	Y+18, r25	; 0x12
    2718:	89 8b       	std	Y+17, r24	; 0x11
    271a:	89 89       	ldd	r24, Y+17	; 0x11
    271c:	9a 89       	ldd	r25, Y+18	; 0x12
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <Get_Bot+0x304>
    2722:	9a 8b       	std	Y+18, r25	; 0x12
    2724:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8b 89       	ldd	r24, Y+19	; 0x13
    2728:	9c 89       	ldd	r25, Y+20	; 0x14
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9c 8b       	std	Y+20, r25	; 0x14
    272e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8b 89       	ldd	r24, Y+19	; 0x13
    2732:	9c 89       	ldd	r25, Y+20	; 0x14
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <Get_Bot+0x2f8>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <Get_Bot+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6d 89       	ldd	r22, Y+21	; 0x15
    273c:	7e 89       	ldd	r23, Y+22	; 0x16
    273e:	8f 89       	ldd	r24, Y+23	; 0x17
    2740:	98 8d       	ldd	r25, Y+24	; 0x18
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	98 8b       	std	Y+16, r25	; 0x10
    2754:	8f 87       	std	Y+15, r24	; 0x0f
    2756:	8f 85       	ldd	r24, Y+15	; 0x0f
    2758:	98 89       	ldd	r25, Y+16	; 0x10
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <Get_Bot+0x340>
    275e:	98 8b       	std	Y+16, r25	; 0x10
    2760:	8f 87       	std	Y+15, r24	; 0x0f
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	89 af       	std	Y+57, r24	; 0x39
    2766:	90 c0       	rjmp	.+288    	; 0x2888 <Get_Bot+0x46e>
if(Get_Bit(PIND,3)==0){while(Get_Bit(PIND,3)==0){}_delay_ms(10);return DOWN; }
    2768:	e0 e3       	ldi	r30, 0x30	; 48
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	86 95       	lsr	r24
    2770:	86 95       	lsr	r24
    2772:	86 95       	lsr	r24
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	81 70       	andi	r24, 0x01	; 1
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	09 f0       	breq	.+2      	; 0x2782 <Get_Bot+0x368>
    2780:	81 c0       	rjmp	.+258    	; 0x2884 <Get_Bot+0x46a>
    2782:	e0 e3       	ldi	r30, 0x30	; 48
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	86 95       	lsr	r24
    278a:	86 95       	lsr	r24
    278c:	86 95       	lsr	r24
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	81 70       	andi	r24, 0x01	; 1
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	a1 f3       	breq	.-24     	; 0x2782 <Get_Bot+0x368>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e2       	ldi	r26, 0x20	; 32
    27a0:	b1 e4       	ldi	r27, 0x41	; 65
    27a2:	8b 87       	std	Y+11, r24	; 0x0b
    27a4:	9c 87       	std	Y+12, r25	; 0x0c
    27a6:	ad 87       	std	Y+13, r26	; 0x0d
    27a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a ef       	ldi	r20, 0xFA	; 250
    27b8:	54 e4       	ldi	r21, 0x44	; 68
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8f 83       	std	Y+7, r24	; 0x07
    27c4:	98 87       	std	Y+8, r25	; 0x08
    27c6:	a9 87       	std	Y+9, r26	; 0x09
    27c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ca:	6f 81       	ldd	r22, Y+7	; 0x07
    27cc:	78 85       	ldd	r23, Y+8	; 0x08
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <Get_Bot+0x3d2>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <Get_Bot+0x450>
	else if (__tmp > 65535)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <Get_Bot+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
    282c:	0f c0       	rjmp	.+30     	; 0x284c <Get_Bot+0x432>
    282e:	88 ec       	ldi	r24, 0xC8	; 200
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <Get_Bot+0x420>
    283e:	9c 83       	std	Y+4, r25	; 0x04
    2840:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <Get_Bot+0x414>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <Get_Bot+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <Get_Bot+0x45c>
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	89 af       	std	Y+57, r24	; 0x39
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <Get_Bot+0x46e>
else if(1){ return ELSE;}
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	89 af       	std	Y+57, r24	; 0x39
    2888:	89 ad       	ldd	r24, Y+57	; 0x39
}
    288a:	e9 96       	adiw	r28, 0x39	; 57
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <Clear_Blok>:
void Clear_Blok(u8 *POS){
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <Clear_Blok+0x6>
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
LCD_voidGoto(POS[0],POS[1]);
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	20 81       	ld	r18, Z
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	fc 01       	movw	r30, r24
    28b6:	31 96       	adiw	r30, 0x01	; 1
    28b8:	90 81       	ld	r25, Z
    28ba:	82 2f       	mov	r24, r18
    28bc:	69 2f       	mov	r22, r25
    28be:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendChar(0b11111110);
    28c2:	8e ef       	ldi	r24, 0xFE	; 254
    28c4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
LCD_voidGoto(POS[0],POS[1]);
    28c8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ca:	fa 81       	ldd	r31, Y+2	; 0x02
    28cc:	20 81       	ld	r18, Z
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	9a 81       	ldd	r25, Y+2	; 0x02
    28d2:	fc 01       	movw	r30, r24
    28d4:	31 96       	adiw	r30, 0x01	; 1
    28d6:	90 81       	ld	r25, Z
    28d8:	82 2f       	mov	r24, r18
    28da:	69 2f       	mov	r22, r25
    28dc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
}
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <END_GAME>:
void END_GAME (void)
{	if ((pacMan_Pos[0] == Enmi_Pos[0]) && (pacMan_Pos[1] == Enmi_Pos[1])){
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <END_GAME+0x6>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <END_GAME+0x8>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	90 91 c5 00 	lds	r25, 0x00C5
    28fa:	80 91 8a 00 	lds	r24, 0x008A
    28fe:	98 17       	cp	r25, r24
    2900:	09 f0       	breq	.+2      	; 0x2904 <END_GAME+0x1a>
    2902:	47 c0       	rjmp	.+142    	; 0x2992 <END_GAME+0xa8>
    2904:	90 91 c6 00 	lds	r25, 0x00C6
    2908:	80 91 8b 00 	lds	r24, 0x008B
    290c:	98 17       	cp	r25, r24
    290e:	09 f0       	breq	.+2      	; 0x2912 <END_GAME+0x28>
    2910:	40 c0       	rjmp	.+128    	; 0x2992 <END_GAME+0xa8>

	LCD_CLEAR;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>
	LCD_voidGoto(0,3);
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_SendString("GAME OVER");
    2920:	80 e6       	ldi	r24, 0x60	; 96
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_SendString>
	LCD_voidGoto(1,0);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_SendString("PRESS RESET POT");
    2930:	8a e6       	ldi	r24, 0x6A	; 106
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_SendString>
	pacMan_Pos[0]=0;
    2938:	10 92 c5 00 	sts	0x00C5, r1
	pacMan_Pos[1] =0;
    293c:	10 92 c6 00 	sts	0x00C6, r1
	for(int  i = 0; i<SEEDNUMBER; i++){
    2940:	1c 82       	std	Y+4, r1	; 0x04
    2942:	1b 82       	std	Y+3, r1	; 0x03
    2944:	11 c0       	rjmp	.+34     	; 0x2968 <END_GAME+0x7e>
				Seed_Arr[i][2]=1;}
    2946:	2b 81       	ldd	r18, Y+3	; 0x03
    2948:	3c 81       	ldd	r19, Y+4	; 0x04
    294a:	c9 01       	movw	r24, r18
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	82 0f       	add	r24, r18
    2952:	93 1f       	adc	r25, r19
    2954:	fc 01       	movw	r30, r24
    2956:	e2 57       	subi	r30, 0x72	; 114
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	80 83       	st	Z, r24
	LCD_SendString("GAME OVER");
	LCD_voidGoto(1,0);
	LCD_SendString("PRESS RESET POT");
	pacMan_Pos[0]=0;
	pacMan_Pos[1] =0;
	for(int  i = 0; i<SEEDNUMBER; i++){
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	9c 83       	std	Y+4, r25	; 0x04
    2966:	8b 83       	std	Y+3, r24	; 0x03
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	8a 30       	cpi	r24, 0x0A	; 10
    296e:	91 05       	cpc	r25, r1
    2970:	54 f3       	brlt	.-44     	; 0x2946 <END_GAME+0x5c>
				Seed_Arr[i][2]=1;}
	Points =0;
    2972:	10 92 c7 00 	sts	0x00C7, r1
	while(Get_Bit(PIND,4)==1){}
    2976:	e0 e3       	ldi	r30, 0x30	; 48
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	82 95       	swap	r24
    297e:	8f 70       	andi	r24, 0x0F	; 15
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	81 70       	andi	r24, 0x01	; 1
    2986:	90 70       	andi	r25, 0x00	; 0
    2988:	88 23       	and	r24, r24
    298a:	a9 f7       	brne	.-22     	; 0x2976 <END_GAME+0x8c>
	LCD_CLEAR;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>

}else {}

if(Points ==SEEDNUMBER){
    2992:	80 91 c7 00 	lds	r24, 0x00C7
    2996:	8a 30       	cpi	r24, 0x0A	; 10
    2998:	c9 f5       	brne	.+114    	; 0x2a0c <END_GAME+0x122>
	LCD_voidGoto(0,3);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	63 e0       	ldi	r22, 0x03	; 3
    299e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
		LCD_SendString("YOU WIN");
    29a2:	8a e7       	ldi	r24, 0x7A	; 122
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_SendString>
		LCD_voidGoto(1,0);
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
		LCD_SendString("PRESS RESET POT");
    29b2:	8a e6       	ldi	r24, 0x6A	; 106
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_SendString>
		Points =0;
    29ba:	10 92 c7 00 	sts	0x00C7, r1
		for(int  i = 0; i<SEEDNUMBER; i++){
    29be:	1a 82       	std	Y+2, r1	; 0x02
    29c0:	19 82       	std	Y+1, r1	; 0x01
    29c2:	11 c0       	rjmp	.+34     	; 0x29e6 <END_GAME+0xfc>
			Seed_Arr[i][2]=1;}
    29c4:	29 81       	ldd	r18, Y+1	; 0x01
    29c6:	3a 81       	ldd	r19, Y+2	; 0x02
    29c8:	c9 01       	movw	r24, r18
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	82 0f       	add	r24, r18
    29d0:	93 1f       	adc	r25, r19
    29d2:	fc 01       	movw	r30, r24
    29d4:	e2 57       	subi	r30, 0x72	; 114
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	80 83       	st	Z, r24
	LCD_voidGoto(0,3);
		LCD_SendString("YOU WIN");
		LCD_voidGoto(1,0);
		LCD_SendString("PRESS RESET POT");
		Points =0;
		for(int  i = 0; i<SEEDNUMBER; i++){
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	8a 30       	cpi	r24, 0x0A	; 10
    29ec:	91 05       	cpc	r25, r1
    29ee:	54 f3       	brlt	.-44     	; 0x29c4 <END_GAME+0xda>
			Seed_Arr[i][2]=1;}
		while(Get_Bit(PIND,4)==1){}
    29f0:	e0 e3       	ldi	r30, 0x30	; 48
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	82 95       	swap	r24
    29f8:	8f 70       	andi	r24, 0x0F	; 15
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	81 70       	andi	r24, 0x01	; 1
    2a00:	90 70       	andi	r25, 0x00	; 0
    2a02:	88 23       	and	r24, r24
    2a04:	a9 f7       	brne	.-22     	; 0x29f0 <END_GAME+0x106>
		LCD_CLEAR;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	0e 94 86 09 	call	0x130c	; 0x130c <LCD_SendCom>

}


}
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <Seed>:
void Seed (void){
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <Seed+0x6>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62

for(int  i = 0; i<SEEDNUMBER; i++){
    2a24:	1a 82       	std	Y+2, r1	; 0x02
    2a26:	19 82       	std	Y+1, r1	; 0x01
    2a28:	5e c0       	rjmp	.+188    	; 0x2ae6 <Seed+0xcc>
	if(Seed_Arr[i][2]==1){
    2a2a:	29 81       	ldd	r18, Y+1	; 0x01
    2a2c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a2e:	c9 01       	movw	r24, r18
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	82 0f       	add	r24, r18
    2a36:	93 1f       	adc	r25, r19
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 57       	subi	r30, 0x72	; 114
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <Seed+0x2c>
    2a44:	4b c0       	rjmp	.+150    	; 0x2adc <Seed+0xc2>
	LCD_voidGoto(Seed_Arr[i][0],Seed_Arr[i][1]);
    2a46:	29 81       	ldd	r18, Y+1	; 0x01
    2a48:	3a 81       	ldd	r19, Y+2	; 0x02
    2a4a:	c9 01       	movw	r24, r18
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	82 0f       	add	r24, r18
    2a52:	93 1f       	adc	r25, r19
    2a54:	fc 01       	movw	r30, r24
    2a56:	e4 57       	subi	r30, 0x74	; 116
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	40 81       	ld	r20, Z
    2a5c:	29 81       	ldd	r18, Y+1	; 0x01
    2a5e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a60:	c9 01       	movw	r24, r18
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	82 0f       	add	r24, r18
    2a68:	93 1f       	adc	r25, r19
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e3 57       	subi	r30, 0x73	; 115
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	90 81       	ld	r25, Z
    2a72:	84 2f       	mov	r24, r20
    2a74:	69 2f       	mov	r22, r25
    2a76:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_SendChar(SEED);
    2a7a:	85 ea       	ldi	r24, 0xA5	; 165
    2a7c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
	if((Seed_Arr[i][0]== pacMan_Pos[0])&&(Seed_Arr[i][1]== pacMan_Pos[1])){
    2a80:	29 81       	ldd	r18, Y+1	; 0x01
    2a82:	3a 81       	ldd	r19, Y+2	; 0x02
    2a84:	c9 01       	movw	r24, r18
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	82 0f       	add	r24, r18
    2a8c:	93 1f       	adc	r25, r19
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e4 57       	subi	r30, 0x74	; 116
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	90 81       	ld	r25, Z
    2a96:	80 91 c5 00 	lds	r24, 0x00C5
    2a9a:	98 17       	cp	r25, r24
    2a9c:	f9 f4       	brne	.+62     	; 0x2adc <Seed+0xc2>
    2a9e:	29 81       	ldd	r18, Y+1	; 0x01
    2aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa2:	c9 01       	movw	r24, r18
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	82 0f       	add	r24, r18
    2aaa:	93 1f       	adc	r25, r19
    2aac:	fc 01       	movw	r30, r24
    2aae:	e3 57       	subi	r30, 0x73	; 115
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	90 81       	ld	r25, Z
    2ab4:	80 91 c6 00 	lds	r24, 0x00C6
    2ab8:	98 17       	cp	r25, r24
    2aba:	81 f4       	brne	.+32     	; 0x2adc <Seed+0xc2>
			Seed_Arr[i][2]=0;
    2abc:	29 81       	ldd	r18, Y+1	; 0x01
    2abe:	3a 81       	ldd	r19, Y+2	; 0x02
    2ac0:	c9 01       	movw	r24, r18
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	82 0f       	add	r24, r18
    2ac8:	93 1f       	adc	r25, r19
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 57       	subi	r30, 0x72	; 114
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	10 82       	st	Z, r1
			Points ++;
    2ad2:	80 91 c7 00 	lds	r24, 0x00C7
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	80 93 c7 00 	sts	0x00C7, r24


}
void Seed (void){

for(int  i = 0; i<SEEDNUMBER; i++){
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	8a 30       	cpi	r24, 0x0A	; 10
    2aec:	91 05       	cpc	r25, r1
    2aee:	0c f4       	brge	.+2      	; 0x2af2 <Seed+0xd8>
    2af0:	9c cf       	rjmp	.-200    	; 0x2a2a <Seed+0x10>

	}
}


LCD_voidGoto(0,14);
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	6e e0       	ldi	r22, 0x0E	; 14
    2af6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
LCD_SendIntNumb(Points);
    2afa:	80 91 c7 00 	lds	r24, 0x00C7
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_SendIntNumb>

}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <Block>:
void Block (void){
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoto(0,5);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	65 e0       	ldi	r22, 0x05	; 5
    2b1c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_voidGoto>
	LCD_SendChar(BLOCK);
    2b20:	8f ef       	ldi	r24, 0xFF	; 255
    2b22:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_SendChar>
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <__divmodhi4>:
    2b2c:	97 fb       	bst	r25, 7
    2b2e:	09 2e       	mov	r0, r25
    2b30:	07 26       	eor	r0, r23
    2b32:	0a d0       	rcall	.+20     	; 0x2b48 <__divmodhi4_neg1>
    2b34:	77 fd       	sbrc	r23, 7
    2b36:	04 d0       	rcall	.+8      	; 0x2b40 <__divmodhi4_neg2>
    2b38:	0c d0       	rcall	.+24     	; 0x2b52 <__udivmodhi4>
    2b3a:	06 d0       	rcall	.+12     	; 0x2b48 <__divmodhi4_neg1>
    2b3c:	00 20       	and	r0, r0
    2b3e:	1a f4       	brpl	.+6      	; 0x2b46 <__divmodhi4_exit>

00002b40 <__divmodhi4_neg2>:
    2b40:	70 95       	com	r23
    2b42:	61 95       	neg	r22
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255

00002b46 <__divmodhi4_exit>:
    2b46:	08 95       	ret

00002b48 <__divmodhi4_neg1>:
    2b48:	f6 f7       	brtc	.-4      	; 0x2b46 <__divmodhi4_exit>
    2b4a:	90 95       	com	r25
    2b4c:	81 95       	neg	r24
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	08 95       	ret

00002b52 <__udivmodhi4>:
    2b52:	aa 1b       	sub	r26, r26
    2b54:	bb 1b       	sub	r27, r27
    2b56:	51 e1       	ldi	r21, 0x11	; 17
    2b58:	07 c0       	rjmp	.+14     	; 0x2b68 <__udivmodhi4_ep>

00002b5a <__udivmodhi4_loop>:
    2b5a:	aa 1f       	adc	r26, r26
    2b5c:	bb 1f       	adc	r27, r27
    2b5e:	a6 17       	cp	r26, r22
    2b60:	b7 07       	cpc	r27, r23
    2b62:	10 f0       	brcs	.+4      	; 0x2b68 <__udivmodhi4_ep>
    2b64:	a6 1b       	sub	r26, r22
    2b66:	b7 0b       	sbc	r27, r23

00002b68 <__udivmodhi4_ep>:
    2b68:	88 1f       	adc	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	5a 95       	dec	r21
    2b6e:	a9 f7       	brne	.-22     	; 0x2b5a <__udivmodhi4_loop>
    2b70:	80 95       	com	r24
    2b72:	90 95       	com	r25
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	08 95       	ret

00002b7a <__prologue_saves__>:
    2b7a:	2f 92       	push	r2
    2b7c:	3f 92       	push	r3
    2b7e:	4f 92       	push	r4
    2b80:	5f 92       	push	r5
    2b82:	6f 92       	push	r6
    2b84:	7f 92       	push	r7
    2b86:	8f 92       	push	r8
    2b88:	9f 92       	push	r9
    2b8a:	af 92       	push	r10
    2b8c:	bf 92       	push	r11
    2b8e:	cf 92       	push	r12
    2b90:	df 92       	push	r13
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	ca 1b       	sub	r28, r26
    2ba4:	db 0b       	sbc	r29, r27
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	09 94       	ijmp

00002bb2 <__epilogue_restores__>:
    2bb2:	2a 88       	ldd	r2, Y+18	; 0x12
    2bb4:	39 88       	ldd	r3, Y+17	; 0x11
    2bb6:	48 88       	ldd	r4, Y+16	; 0x10
    2bb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bba:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bbc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bbe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bc0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bc2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bc4:	b9 84       	ldd	r11, Y+9	; 0x09
    2bc6:	c8 84       	ldd	r12, Y+8	; 0x08
    2bc8:	df 80       	ldd	r13, Y+7	; 0x07
    2bca:	ee 80       	ldd	r14, Y+6	; 0x06
    2bcc:	fd 80       	ldd	r15, Y+5	; 0x05
    2bce:	0c 81       	ldd	r16, Y+4	; 0x04
    2bd0:	1b 81       	ldd	r17, Y+3	; 0x03
    2bd2:	aa 81       	ldd	r26, Y+2	; 0x02
    2bd4:	b9 81       	ldd	r27, Y+1	; 0x01
    2bd6:	ce 0f       	add	r28, r30
    2bd8:	d1 1d       	adc	r29, r1
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	ed 01       	movw	r28, r26
    2be6:	08 95       	ret

00002be8 <_exit>:
    2be8:	f8 94       	cli

00002bea <__stop_program>:
    2bea:	ff cf       	rjmp	.-2      	; 0x2bea <__stop_program>
